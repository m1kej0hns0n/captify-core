{"version":3,"sources":["../src/hooks/use-mobile.ts","../src/hooks/useApplicationAccess.ts","../src/lib/api.ts","../src/hooks/useFavorites.ts","../src/lib/react-compat.ts","../src/components/providers/CaptifyProvider.tsx","../src/hooks/useApi.ts","../src/lib/auth.ts","../src/lib/utils.ts","../src/hooks/useAppContext.ts","../src/hooks/useSafeRef.ts"],"sourcesContent":["'use client';\r\n\r\nimport * as React from \"react\";\r\n\r\nconst MOBILE_BREAKPOINT = 768;\r\n\r\nexport function useIsMobile() {\r\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(\r\n    undefined\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\r\n    const onChange = () => {\r\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\r\n    };\r\n    mql.addEventListener(\"change\", onChange);\r\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\r\n    return () => mql.removeEventListener(\"change\", onChange);\r\n  }, []);\r\n\r\n  return !!isMobile;\r\n}\r\n","\"use client\";\r\n\r\n/**\r\n * React hook for managing application access\r\n * Uses the standard apiClient to communicate with the applicationAccess service\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { apiClient } from \"../lib/api\";\r\nimport type { App } from \"../types\";\r\n\r\n// These types should be moved to shared if needed by multiple packages\r\ntype AppAccessRequest = any;\r\ntype UserAccessProfile = any;\r\n\r\nexport function useApplicationAccess() {\r\n  const { data: session } = useSession();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [myApps, setMyApps] = useState<App[]>([]);\r\n  const [allApps, setAllApps] = useState<App[]>([]);\r\n  const [pendingRequests, setPendingRequests] = useState<AppAccessRequest[]>([]);\r\n\r\n  /**\r\n   * Fetch all installed applications\r\n   */\r\n  const fetchAllApps = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await apiClient.run({\r\n        app: \"core\",\r\n        service: \"applicationAccess\",\r\n        operation: \"getInstalledApps\",\r\n      });\r\n      \r\n      if (response.success) {\r\n        setAllApps(response.data || []);\r\n      } else {\r\n        throw new Error(response.error || \"Failed to fetch applications\");\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"An error occurred\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Fetch user's accessible applications\r\n   */\r\n  const fetchMyApps = useCallback(async () => {\r\n    if (!session?.user?.id) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await apiClient.run({\r\n        app: \"core\",\r\n        service: \"applicationAccess\",\r\n        operation: \"getUserApps\",\r\n      });\r\n      \r\n      if (response.success) {\r\n        setMyApps(response.data || []);\r\n      } else {\r\n        throw new Error(response.error || \"Failed to fetch your applications\");\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"An error occurred\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [session]);\r\n\r\n  /**\r\n   * Request access to an application\r\n   */\r\n  const requestAccess = useCallback(\r\n    async (\r\n      appId: string,\r\n      justification: string,\r\n      requestedRole?: string,\r\n      autoExpireDays?: number\r\n    ): Promise<boolean> => {\r\n      if (!session?.user?.id || !session?.user?.email) {\r\n        setError(\"You must be logged in to request access\");\r\n        return false;\r\n      }\r\n      \r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"requestAccess\",\r\n          data: {\r\n            appId,\r\n            justification,\r\n            requestedRole,\r\n            autoExpireDays,\r\n          },\r\n        });\r\n        \r\n        if (response.success) {\r\n          // Refresh pending requests\r\n          await fetchPendingRequests();\r\n          return true;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to request access\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return false;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [session]\r\n  );\r\n\r\n  /**\r\n   * Fetch user's pending access requests\r\n   */\r\n  const fetchPendingRequests = useCallback(async () => {\r\n    if (!session?.user?.id) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // For now, we'll need to implement a user-specific pending requests operation\r\n      // This is a placeholder that returns empty array\r\n      setPendingRequests([]);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"An error occurred\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [session]);\r\n\r\n  /**\r\n   * Get user's access profile for a specific app\r\n   */\r\n  const getAccessProfile = useCallback(\r\n    async (appId: string): Promise<UserAccessProfile | null> => {\r\n      if (!session?.user?.id) return null;\r\n      \r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run<UserAccessProfile>({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"getUserAccessProfile\",\r\n          data: { appId },\r\n        });\r\n        \r\n        if (response.success) {\r\n          return response.data || null;\r\n        } else if (response.error?.includes(\"No access\")) {\r\n          return null;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to fetch access profile\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return null;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [session]\r\n  );\r\n\r\n  /**\r\n   * Check if user has access to an app\r\n   */\r\n  const hasAccess = useCallback(\r\n    (appId: string): boolean => {\r\n      return myApps.some(app => app.id === appId);\r\n    },\r\n    [myApps]\r\n  );\r\n\r\n  /**\r\n   * Check if user has a pending request for an app\r\n   */\r\n  const hasPendingRequest = useCallback(\r\n    (appId: string): boolean => {\r\n      return pendingRequests.some(\r\n        req => req.appId === appId && req.status === \"pending\"\r\n      );\r\n    },\r\n    [pendingRequests]\r\n  );\r\n\r\n  // Load data on mount\r\n  useEffect(() => {\r\n    if (session?.user?.id) {\r\n      fetchAllApps();\r\n      fetchMyApps();\r\n      fetchPendingRequests();\r\n    }\r\n  }, [session, fetchAllApps, fetchMyApps, fetchPendingRequests]);\r\n\r\n  return {\r\n    // State\r\n    loading,\r\n    error,\r\n    myApps,\r\n    allApps,\r\n    pendingRequests,\r\n    \r\n    // Actions\r\n    requestAccess,\r\n    getAccessProfile,\r\n    \r\n    // Helpers\r\n    hasAccess,\r\n    hasPendingRequest,\r\n    \r\n    // Refresh methods\r\n    refresh: {\r\n      allApps: fetchAllApps,\r\n      myApps: fetchMyApps,\r\n      pendingRequests: fetchPendingRequests,\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for admin functions\r\n */\r\nexport function useApplicationAdmin() {\r\n  const { data: session } = useSession();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [pendingRequests, setPendingRequests] = useState<AppAccessRequest[]>([]);\r\n\r\n  /**\r\n   * Fetch all pending access requests (admin)\r\n   */\r\n  const fetchPendingRequests = useCallback(async (appId?: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await apiClient.run<AppAccessRequest[]>({\r\n        app: \"core\",\r\n        service: \"applicationAccess\",\r\n        operation: \"getPendingRequests\",\r\n        data: appId ? { appId } : undefined,\r\n      });\r\n      \r\n      if (response.success) {\r\n        setPendingRequests(response.data || []);\r\n      } else {\r\n        throw new Error(response.error || \"Failed to fetch pending requests\");\r\n      }\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : \"An error occurred\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Approve an access request\r\n   */\r\n  const approveRequest = useCallback(\r\n    async (\r\n      requestId: string,\r\n      roleId: string,\r\n      reviewNotes?: string\r\n    ): Promise<boolean> => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"approveRequest\",\r\n          data: {\r\n            requestId,\r\n            roleId,\r\n            reviewNotes,\r\n          },\r\n        });\r\n        \r\n        if (response.success) {\r\n          // Refresh pending requests\r\n          await fetchPendingRequests();\r\n          return true;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to approve request\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return false;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [fetchPendingRequests]\r\n  );\r\n\r\n  /**\r\n   * Reject an access request\r\n   */\r\n  const rejectRequest = useCallback(\r\n    async (requestId: string, reviewNotes: string): Promise<boolean> => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"rejectRequest\",\r\n          data: {\r\n            requestId,\r\n            reviewNotes,\r\n          },\r\n        });\r\n        \r\n        if (response.success) {\r\n          // Refresh pending requests\r\n          await fetchPendingRequests();\r\n          return true;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to reject request\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return false;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [fetchPendingRequests]\r\n  );\r\n\r\n  /**\r\n   * Grant direct access to a user\r\n   */\r\n  const grantAccess = useCallback(\r\n    async (\r\n      userId: string,\r\n      appId: string,\r\n      roleId: string,\r\n      justification?: string,\r\n      expireDays?: number\r\n    ): Promise<boolean> => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"grantAccess\",\r\n          data: {\r\n            userId,\r\n            appId,\r\n            roleId,\r\n            justification,\r\n            expireDays,\r\n          },\r\n        });\r\n        \r\n        if (response.success) {\r\n          return true;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to grant access\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return false;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  /**\r\n   * Revoke access from a user\r\n   */\r\n  const revokeAccess = useCallback(\r\n    async (userId: string, appId: string, reason?: string): Promise<boolean> => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"revokeAccess\",\r\n          data: {\r\n            userId,\r\n            appId,\r\n            reason,\r\n          },\r\n        });\r\n        \r\n        if (response.success) {\r\n          return true;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to revoke access\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return false;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  /**\r\n   * Get app access summary\r\n   */\r\n  const getAppSummary = useCallback(\r\n    async (appId: string): Promise<any | null> => {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const response = await apiClient.run<any>({\r\n          app: \"core\",\r\n          service: \"applicationAccess\",\r\n          operation: \"getAppAccessSummary\",\r\n          data: { appId },\r\n        });\r\n        \r\n        if (response.success) {\r\n          return response.data || null;\r\n        } else {\r\n          throw new Error(response.error || \"Failed to fetch app summary\");\r\n        }\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : \"An error occurred\");\r\n        return null;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // Load pending requests on mount (if admin)\r\n  useEffect(() => {\r\n    // TODO: Check if user is admin\r\n    if (session?.user?.id) {\r\n      fetchPendingRequests();\r\n    }\r\n  }, [session, fetchPendingRequests]);\r\n\r\n  return {\r\n    // State\r\n    loading,\r\n    error,\r\n    pendingRequests,\r\n    \r\n    // Actions\r\n    approveRequest,\r\n    rejectRequest,\r\n    grantAccess,\r\n    revokeAccess,\r\n    getAppSummary,\r\n    \r\n    // Refresh methods\r\n    refresh: {\r\n      pendingRequests: fetchPendingRequests,\r\n    },\r\n  };\r\n}","\"use client\";\r\nimport type { Session } from \"next-auth\";\r\n\r\nexport interface CaptifyResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\nexport interface ApiRequest {\r\n  service: string;\r\n  operation: string;\r\n  app?: string;\r\n  table?: string;\r\n  identityPoolId?: string; // Optional Identity Pool ID to use for AWS credentials\r\n  forceRefresh?: boolean; // Force refresh of AWS credentials\r\n  data?: {\r\n    values?: Array<{ [field: string]: any }>;\r\n    fields?: string[];\r\n    index?: string;\r\n    limit?: number;\r\n    start?: any;\r\n    [key: string]: any; // Allow any additional data\r\n  };\r\n  useCache?: boolean; // Use native fetch caching\r\n}\r\n\r\nclass ApiClient {\r\n  private currentAppIdentityPoolId: string | undefined = undefined;\r\n  private currentAppSlug: string | undefined = undefined;\r\n  \r\n  // Set the current app's identity pool ID (called when app context changes)\r\n  setAppIdentityPool(poolId: string | undefined, appSlug?: string) {\r\n    // Only update if it's actually changing to prevent unnecessary logs\r\n    if (this.currentAppIdentityPoolId !== poolId || this.currentAppSlug !== appSlug) {\r\n      this.currentAppIdentityPoolId = poolId;\r\n      this.currentAppSlug = appSlug;\r\n      console.log(`[ApiClient] Identity pool set for app '${appSlug || 'unknown'}':`, poolId || 'none');\r\n    }\r\n  }\r\n  \r\n  // Get the current identity pool (for debugging)\r\n  getCurrentIdentityPool(): string | undefined {\r\n    return this.currentAppIdentityPoolId;\r\n  }\r\n  \r\n  async run<T = any>(request: ApiRequest): Promise<CaptifyResponse<T>> {\r\n    try {\r\n      // Use app from request, default to \"core\" if not specified\r\n      const app = request.app || \"core\";\r\n      const url = `/api/captify`;\r\n      \r\n      // If no identity pool is explicitly provided, use the current app's pool\r\n      const finalRequest = {\r\n        ...request,\r\n        identityPoolId: request.identityPoolId || this.currentAppIdentityPoolId\r\n      };\r\n      \r\n      // Debug logging\r\n      console.log('[ApiClient] Request details:', {\r\n        service: request.service,\r\n        operation: request.operation,\r\n        providedPoolId: request.identityPoolId,\r\n        currentAppPoolId: this.currentAppIdentityPoolId,\r\n        finalPoolId: finalRequest.identityPoolId\r\n      });\r\n      \r\n      // Log when using app's identity pool\r\n      if (!request.identityPoolId && this.currentAppIdentityPoolId) {\r\n        console.log('[ApiClient] Using app identity pool for request:', this.currentAppIdentityPoolId);\r\n      }\r\n\r\n      const fetchOptions: RequestInit = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-app\": app,\r\n        },\r\n        body: JSON.stringify(finalRequest), // Use finalRequest which includes identityPoolId\r\n      };\r\n\r\n      // Add native fetch caching if requested\r\n      if (request.useCache) {\r\n        fetchOptions.cache = 'force-cache';\r\n      }\r\n\r\n      const response = await fetch(url, fetchOptions);\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          success: false,\r\n          error: `HTTP ${response.status}: ${response.statusText}`,\r\n        };\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const apiClient = new ApiClient();\r\n\r\n// Helper function for Cognito admin operations\r\nexport async function runCognitoAdminOperation<T = any>(\r\n  operation: string,\r\n  params?: any\r\n): Promise<CaptifyResponse<T>> {\r\n  // Get admin Identity Pool ID from environment or use hardcoded value\r\n  const adminPoolId = process.env.NEXT_PUBLIC_COGNITO_ADMIN_IDENTITY_POOL_ID || \r\n                      'us-east-1:52e865f2-4871-4a74-8976-edc945af0c0f';\r\n  \r\n  return apiClient.run<T>({\r\n    service: 'cognito',\r\n    operation,\r\n    app: 'core',\r\n    identityPoolId: adminPoolId,\r\n    forceRefresh: true, // Always refresh for admin operations\r\n    data: params,\r\n  });\r\n}\r\n","\"use client\";\r\n\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useState } from \"../lib/react-compat\";\r\nimport { apiClient } from \"../lib/api\";\r\nimport { useCaptify } from \"../components/providers/CaptifyProvider\";\r\n// UserState is a core-specific type\r\ntype UserState = any;\r\n\r\n/**\r\n * Hook for managing user favorites\r\n * Provides real-time updates when favorites are added/removed\r\n */\r\nexport function useFavorites() {\r\n  const { session } = useCaptify();\r\n  const [favoriteApps, setFavoriteApps] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch user's favorite apps from DynamoDB\r\n  const fetchFavoriteApps = useCallback(async () => {\r\n    if (!session?.user || !(session.user as any)?.id) {\r\n      setFavoriteApps([]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const userId = (session.user as any).id;\r\n      const response = await apiClient.run({\r\n        service: \"dynamo\",\r\n        operation: \"query\",\r\n        app: \"core\",\r\n        table: \"UserState\",\r\n        data: {\r\n          IndexName: \"userId-index\",\r\n          KeyConditionExpression: \"userId = :userId\",\r\n          ExpressionAttributeValues: {\r\n            \":userId\": userId,\r\n          },\r\n          Limit: 1,\r\n        },\r\n      });\r\n\r\n      if (response.success && response.data?.Items?.length > 0) {\r\n        const userState = response.data.Items[0] as UserState;\r\n        // UserState has favoriteApps as a direct array property\r\n        setFavoriteApps(userState.favoriteApps || []);\r\n      } else {\r\n        setFavoriteApps([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching favorite apps:\", error);\r\n      setFavoriteApps([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [session?.user]);\r\n\r\n  // Toggle favorite app\r\n  const toggleFavorite = useCallback(\r\n    async (appId: string): Promise<void> => {\r\n      if (!session?.user || !(session.user as any)?.id) return;\r\n\r\n      const newFavorites = favoriteApps.includes(appId)\r\n        ? favoriteApps.filter((id) => id !== appId)\r\n        : [...favoriteApps, appId];\r\n\r\n      // Update local state immediately for better UX\r\n      setFavoriteApps(newFavorites);\r\n\r\n      try {\r\n        const userId = (session.user as any).id;\r\n        \r\n        // First, get the current UserState\r\n        const userStatesResponse = await apiClient.run({\r\n          service: \"dynamo\",\r\n          operation: \"query\",\r\n          app: \"core\",\r\n          table: \"UserState\",\r\n          data: {\r\n            IndexName: \"userId-index\",\r\n            KeyConditionExpression: \"userId = :userId\",\r\n            ExpressionAttributeValues: {\r\n              \":userId\": userId,\r\n            },\r\n            Limit: 1,\r\n          },\r\n        });\r\n\r\n        if (\r\n          userStatesResponse.success &&\r\n          userStatesResponse.data?.Items?.length > 0\r\n        ) {\r\n          // Update existing UserState\r\n          const userState = userStatesResponse.data.Items[0] as UserState;\r\n          await apiClient.run({\r\n            service: \"dynamo\",\r\n            operation: \"update\",\r\n            app: \"core\",\r\n            table: \"UserState\",\r\n            data: {\r\n              key: { id: userState.id },\r\n              updateExpression: \"SET favoriteApps = :favorites, updatedAt = :updatedAt\",\r\n              expressionAttributeValues: {\r\n                \":favorites\": newFavorites,\r\n                \":updatedAt\": new Date().toISOString(),\r\n              },\r\n            },\r\n          });\r\n        } else {\r\n          // Create new UserState if none exists (matching Core interface)\r\n          const newUserState = {\r\n            id: `userstate-${userId}-${Date.now()}`,\r\n            slug: `userstate-${userId}`,\r\n            name: `UserState for ${(session.user as any).email || userId}`,\r\n            app: \"core\",\r\n            order: \"0\",\r\n            fields: {},\r\n            description: \"User preferences and state\",\r\n            ownerId: userId,\r\n            createdAt: new Date().toISOString(),\r\n            createdBy: userId,\r\n            updatedAt: new Date().toISOString(),\r\n            updatedBy: userId,\r\n            userId: userId,\r\n            favoriteApps: newFavorites,\r\n            recentApps: [],\r\n            preferences: {},\r\n          };\r\n\r\n          await apiClient.run({\r\n            service: \"dynamo\",\r\n            operation: \"put\",\r\n            app: \"core\",\r\n            table: \"UserState\",\r\n            data: {\r\n              item: newUserState,\r\n            },\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating favorite apps:\", error);\r\n        // Revert local state on error\r\n        setFavoriteApps(favoriteApps);\r\n      }\r\n    },\r\n    [session?.user, favoriteApps]\r\n  );\r\n\r\n  // Load favorites when session changes\r\n  useEffect(() => {\r\n    fetchFavoriteApps();\r\n  }, [fetchFavoriteApps]);\r\n\r\n  // Check if an app is favorited\r\n  const isFavorite = useCallback(\r\n    (appId: string): boolean => {\r\n      return favoriteApps.includes(appId);\r\n    },\r\n    [favoriteApps]\r\n  );\r\n\r\n  return {\r\n    favoriteApps,\r\n    loading,\r\n    toggleFavorite,\r\n    isFavorite,\r\n    refetch: fetchFavoriteApps,\r\n  };\r\n}","\"use client\";\r\n\r\nimport React from \"react\";\r\n\r\n// Ensure React is available in the global scope for monorepo compatibility\r\nif (typeof window !== \"undefined\" && !window.React) {\r\n  (window as any).React = React;\r\n}\r\n\r\n// Safe hook wrapper that prevents SSR errors\r\nexport function useSafeRef<T>(initialValue: T) {\r\n  if (typeof window === \"undefined\") {\r\n    // SSR: Return a simple object that acts like a ref\r\n    return { current: initialValue };\r\n  }\r\n  return React.useRef<T>(initialValue);\r\n}\r\n\r\nexport function useSafeState<T>(initialState: T | (() => T)) {\r\n  if (typeof window === \"undefined\") {\r\n    // SSR: Return initial state and a no-op setter\r\n    const initial =\r\n      typeof initialState === \"function\"\r\n        ? (initialState as () => T)()\r\n        : initialState;\r\n    return [initial, () => {}] as const;\r\n  }\r\n  return React.useState(initialState);\r\n}\r\n\r\nexport function useSafeEffect(\r\n  effect: React.EffectCallback,\r\n  deps?: React.DependencyList\r\n) {\r\n  if (typeof window === \"undefined\") {\r\n    // SSR: Do nothing\r\n    return;\r\n  }\r\n  return React.useEffect(effect, deps);\r\n}\r\n\r\n// Export safe hooks with standard names for easy replacement\r\nexport const useState = useSafeState;\r\nexport const useRef = useSafeRef;\r\nexport const useEffect = useSafeEffect;\r\n\r\nexport default React;\r\n","\"use client\";\n\nimport React, { createContext, useContext, ReactNode } from \"react\";\nimport { Session } from \"next-auth\";\n\ninterface CaptifyContextType {\n  session: Session | null;\n  isLoading: boolean;\n}\n\nconst CaptifyContext = createContext<CaptifyContextType>({\n  session: null,\n  isLoading: true,\n});\n\ninterface CaptifyProviderProps {\n  children: ReactNode;\n  session?: Session | null | undefined;\n}\n\nexport function CaptifyProvider({\n  children,\n  session = null,\n}: CaptifyProviderProps) {\n  const contextValue: CaptifyContextType = {\n    session,\n    isLoading: false,\n  };\n\n  return (\n    <CaptifyContext.Provider value={contextValue}>\n      {children}\n    </CaptifyContext.Provider>\n  );\n}\n\nexport function useCaptify(): CaptifyContextType {\n  const context = useContext(CaptifyContext);\n  if (!context) {\n    throw new Error(\"useCaptify must be used within a CaptifyProvider\");\n  }\n  return context;\n}\n","/**\r\n * React hooks for Captify API operations\r\n */\r\n\"use client\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { apiClient, type CaptifyResponse } from \"../lib\";\r\n\r\ninterface UseApiState<T> {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ninterface UseApiReturn<T> extends UseApiState<T> {\r\n  execute: (...args: any[]) => Promise<T | null>;\r\n  reset: () => void;\r\n}\r\n\r\n/**\r\n * Generic hook for API operations\r\n */\r\nexport function useApi<T = any>(\r\n  apiCall: (\r\n    client: typeof apiClient,\r\n    ...args: any[]\r\n  ) => Promise<CaptifyResponse<T>>\r\n): UseApiReturn<T> {\r\n  const [state, setState] = useState<UseApiState<T>>({\r\n    data: null,\r\n    loading: false,\r\n    error: null,\r\n  });\r\n\r\n  const execute = useCallback(\r\n    async (...args: any[]): Promise<T | null> => {\r\n      setState((prev) => ({ ...prev, loading: true, error: null }));\r\n\r\n      try {\r\n        const response = await apiCall(apiClient, ...args);\r\n\r\n        if (response.success) {\r\n          setState({\r\n            data: response.data || null,\r\n            loading: false,\r\n            error: null,\r\n          });\r\n          return response.data || null;\r\n        } else {\r\n          setState({\r\n            data: null,\r\n            loading: false,\r\n            error: response.error || \"API call failed\",\r\n          });\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : \"Unknown error\";\r\n        setState({\r\n          data: null,\r\n          loading: false,\r\n          error: errorMessage,\r\n        });\r\n        return null;\r\n      }\r\n    },\r\n    [apiCall]\r\n  );\r\n\r\n  const reset = useCallback(() => {\r\n    setState({\r\n      data: null,\r\n      loading: false,\r\n      error: null,\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    ...state,\r\n    execute,\r\n    reset,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for DynamoDB get operations\r\n */\r\nexport function useGetItem<T = any>(tableName: string) {\r\n  return useApi<T>((client, key: Record<string, any>) =>\r\n    client.run({\r\n      service: \"dynamo\",\r\n      operation: \"getItem\",\r\n      app: \"core\",\r\n      table: tableName,\r\n      data: { Key: key },\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for DynamoDB put operations\r\n */\r\nexport function usePutItem<T = any>(tableName: string) {\r\n  return useApi<T>((client, item: Record<string, any>) =>\r\n    client.run({\r\n      service: \"dynamo\",\r\n      operation: \"put\",\r\n      app: \"core\",\r\n      table: tableName,\r\n      data: { Item: item },\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for DynamoDB update operations\r\n */\r\nexport function useUpdateItem<T = any>(tableName: string) {\r\n  return useApi<T>(\r\n    (\r\n      client,\r\n      key: Record<string, any>,\r\n      updateExpression: string,\r\n      expressionAttributeValues?: Record<string, any>,\r\n      expressionAttributeNames?: Record<string, any>\r\n    ) =>\r\n      client.run({\r\n        service: \"dynamo\",\r\n        operation: \"update\",\r\n        app: \"core\",\r\n        table: tableName,\r\n        data: {\r\n          Key: key,\r\n          UpdateExpression: updateExpression,\r\n          ExpressionAttributeValues: expressionAttributeValues,\r\n          ExpressionAttributeNames: expressionAttributeNames,\r\n          ReturnValues: \"ALL_NEW\",\r\n        },\r\n      })\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for DynamoDB delete operations\r\n */\r\nexport function useDeleteItem(tableName: string) {\r\n  return useApi<{ success: boolean }>((client, key: Record<string, any>) =>\r\n    client.run({\r\n      service: \"dynamo\",\r\n      operation: \"delete\",\r\n      app: \"core\",\r\n      table: tableName,\r\n      data: { Key: key },\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for DynamoDB scan operations\r\n */\r\nexport function useScanTable<T = any>(tableName: string) {\r\n  return useApi<{ items: T[] }>((client, params: Record<string, any> = {}) =>\r\n    client.run({\r\n      service: \"dynamo\",\r\n      operation: \"scan\",\r\n      app: \"core\",\r\n      table: tableName,\r\n      data: params,\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for auth operations\r\n * TODO: These hooks need to be implemented with proper auth endpoints\r\n */\r\nexport function useAuth() {\r\n  // const validateSession = useApi<{ valid: boolean }>(\r\n  //   (client, idToken: string) =>\r\n  //     client.post({\r\n  //       resource: \"auth\",\r\n  //       operation: \"validate\",\r\n  //       data: { idToken },\r\n  //     })\r\n  // );\r\n\r\n  // const refreshSession = useApi<any>((client, idToken: string) =>\r\n  //   client.post({ resource: \"auth\", operation: \"refresh\", data: { idToken } })\r\n  // );\r\n\r\n  // const getAwsCredentials = useApi<{ credentials: any }>(\r\n  //   (client, idToken: string, identityPoolId: string) =>\r\n  //     client.post({\r\n  //       resource: \"auth\",\r\n  //       operation: \"getAwsCredentials\",\r\n  //       data: { idToken, identityPoolId },\r\n  //     })\r\n  // );\r\n\r\n  return {\r\n    // validateSession: validateSession.execute,\r\n    // refreshSession: refreshSession.execute,\r\n    // getAwsCredentials: getAwsCredentials.execute,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n}\r\n","import NextAuth from \"next-auth\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\nimport CognitoProvider from \"next-auth/providers/cognito\";\r\n\r\n/**\r\n * Refresh the access token using the refresh token\r\n * @param refreshToken - The refresh token from Cognito\r\n * @returns The new tokens\r\n */\r\nasync function refreshAccessToken(refreshToken: string) {\r\n  try {\r\n    // Check if we have a refresh token\r\n    if (!refreshToken) {\r\n      // Log error without using console.error on server\r\n      if (typeof window !== \"undefined\") {\r\n        console.error(\"No refresh token available\");\r\n      }\r\n      throw new Error(\"No refresh token available\");\r\n    }\r\n\r\n    // Check if environment variables are set\r\n    if (\r\n      !process.env.COGNITO_ISSUER ||\r\n      !process.env.COGNITO_CLIENT_ID ||\r\n      !process.env.COGNITO_CLIENT_SECRET\r\n    ) {\r\n      // Server-side logging allowed here as this is configuration error\r\n      // But still check to avoid client-side errors\r\n      if (typeof window !== \"undefined\") {\r\n        console.error(\"Missing Cognito environment variables\");\r\n      }\r\n      throw new Error(\"Missing Cognito configuration\");\r\n    }\r\n\r\n    const url = `${process.env.COGNITO_ISSUER}/oauth2/token`;\r\n\r\n    // Debug logging only in development\r\n    if (\r\n      process.env.NODE_ENV === \"development\" &&\r\n      typeof window !== \"undefined\"\r\n    ) {\r\n      console.log(\"Attempting to refresh token at:\", url);\r\n    }\r\n\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: new URLSearchParams({\r\n        grant_type: \"refresh_token\",\r\n        refresh_token: refreshToken,\r\n        client_id: process.env.COGNITO_CLIENT_ID!,\r\n        client_secret: process.env.COGNITO_CLIENT_SECRET!,\r\n      }),\r\n    });\r\n\r\n    const responseText = await response.text();\r\n\r\n    // Try to parse as JSON\r\n    let refreshedTokens;\r\n    try {\r\n      refreshedTokens = JSON.parse(responseText);\r\n    } catch (parseError) {\r\n      // Log error without using console.error on server\r\n      if (typeof window !== \"undefined\") {\r\n        console.error(\"Failed to parse refresh response:\", responseText);\r\n      }\r\n      throw new Error(`Invalid response from token endpoint: ${responseText}`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      // Log error without using console.error on server\r\n      if (typeof window !== \"undefined\") {\r\n        console.error(\"Token refresh failed:\", {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          error: refreshedTokens.error,\r\n          error_description: refreshedTokens.error_description,\r\n        });\r\n      }\r\n      throw new Error(\r\n        refreshedTokens.error_description ||\r\n          refreshedTokens.error ||\r\n          \"Token refresh failed\"\r\n      );\r\n    }\r\n\r\n    // Validate the response has required fields\r\n    if (!refreshedTokens.access_token) {\r\n      // Log error without using console.error on server\r\n      if (typeof window !== \"undefined\") {\r\n        console.error(\"No access token in refresh response:\", refreshedTokens);\r\n      }\r\n      throw new Error(\"Invalid token refresh response - missing access_token\");\r\n    }\r\n\r\n    return {\r\n      access_token: refreshedTokens.access_token,\r\n      id_token: refreshedTokens.id_token,\r\n      expires_in: refreshedTokens.expires_in ?? 3600, // Default to 1 hour\r\n      refresh_token: refreshedTokens.refresh_token,\r\n    };\r\n  } catch (error) {\r\n    // Log error without using console.error on server\r\n    if (typeof window !== \"undefined\") {\r\n      console.error(\"Error refreshing access token:\", {\r\n        error: error instanceof Error ? error.message : error,\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n      });\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\nconst authConfig: NextAuthConfig = {\r\n  providers: [\r\n    CognitoProvider({\r\n      clientId: process.env.COGNITO_CLIENT_ID!,\r\n      clientSecret: process.env.COGNITO_CLIENT_SECRET!,\r\n      issuer: process.env.COGNITO_ISSUER,\r\n      checks: [\"pkce\", \"state\"], // no \"nonce\"\r\n      authorization: {\r\n        params: {\r\n          scope: \"openid email profile\",\r\n          response_type: \"code\",\r\n          response_mode: \"query\",\r\n        },\r\n      },\r\n      // Override the nonce check\r\n      profile(profile) {\r\n        return {\r\n          id: profile.sub,\r\n          name: profile.name,\r\n          email: profile.email,\r\n          image: profile.picture,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  pages: {\r\n    signIn: \"/auth/signin\",\r\n    error: \"/auth/error\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, account, profile }) {\r\n      // Initial sign in\r\n      if (account && profile) {\r\n        // Debug logging only in development\r\n        if (process.env.NODE_ENV === \"development\") {\r\n          console.log(\"JWT Callback - Initial sign in\", { account, profile });\r\n        }\r\n        return {\r\n          ...token,\r\n          accessToken: account.access_token,\r\n          idToken: account.id_token,\r\n          refreshToken: account.refresh_token,\r\n          expiresAt: account.expires_at,\r\n          username: profile.preferred_username || profile.email,\r\n          groups: (profile as any)[\"cognito:groups\"] || [],\r\n        };\r\n      }\r\n\r\n      // Return previous token if the access token has not expired yet\r\n      // Check 5 minutes before expiry to ensure smooth refresh\r\n      const refreshBuffer = 5 * 60 * 1000; // 5 minutes in milliseconds\r\n      if (Date.now() < (token.expiresAt as number) * 1000 - refreshBuffer) {\r\n        return token;\r\n      }\r\n\r\n      // Access token has expired or is about to expire, refresh it\r\n      // Debug logging only in development\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.log(\"Token expired or expiring soon, refreshing...\");\r\n      }\r\n\r\n      // Check if we have a refresh token\r\n      if (!token.refreshToken) {\r\n        // Log error without using console.error on server\r\n        if (typeof window !== \"undefined\") {\r\n          console.error(\"No refresh token available in JWT token\");\r\n        }\r\n        return { ...token, error: \"RefreshAccessTokenError\" };\r\n      }\r\n\r\n      // Refresh the access token using the refresh token\r\n      try {\r\n        const refreshedTokens = await refreshAccessToken(\r\n          token.refreshToken as string\r\n        );\r\n\r\n        // Debug logging only in development\r\n        if (process.env.NODE_ENV === \"development\") {\r\n          console.log(\"Token refreshed successfully\");\r\n        }\r\n\r\n        return {\r\n          ...token,\r\n          accessToken: refreshedTokens.access_token,\r\n          idToken: refreshedTokens.id_token,\r\n          refreshToken: refreshedTokens.refresh_token || token.refreshToken, // Use new refresh token if provided\r\n          expiresAt: Math.floor(Date.now() / 1000) + refreshedTokens.expires_in,\r\n        };\r\n      } catch (error) {\r\n        // Log error without using console.error on server\r\n        if (typeof window !== \"undefined\") {\r\n          console.error(\"Failed to refresh access token:\", {\r\n            error: error instanceof Error ? error.message : error,\r\n            hasRefreshToken: !!token.refreshToken,\r\n            tokenExpiry: token.expiresAt\r\n              ? new Date((token.expiresAt as number) * 1000).toISOString()\r\n              : \"unknown\",\r\n          });\r\n        }\r\n        // Return the old token and let the session expire\r\n        // The user will be redirected to sign in\r\n        return { ...token, error: \"RefreshAccessTokenError\" };\r\n      }\r\n    },\r\n    async session({ session, token }) {\r\n      // Send properties to the client\r\n      // Debug logging only in development\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.log(\"Session Callback\", { token });\r\n      }\r\n\r\n      // Check for token refresh error\r\n      if ((token as any).error === \"RefreshAccessTokenError\") {\r\n        // Log error without using console.error on server\r\n        if (typeof window !== \"undefined\") {\r\n          console.error(\r\n            \"Session has a refresh error, user needs to re-authenticate\"\r\n          );\r\n        }\r\n        // Return a session with an error flag\r\n        return {\r\n          ...session,\r\n          error: \"RefreshAccessTokenError\",\r\n        };\r\n      }\r\n\r\n      session.user = {\r\n        ...session.user,\r\n        id: token.sub!,\r\n      };\r\n      (session as any).username = token.username;\r\n      (session as any).accessToken = token.accessToken;\r\n      (session as any).idToken = token.idToken;\r\n      (session as any).expiresAt = token.expiresAt;\r\n      (session as any).groups = token.groups || [];\r\n\r\n      // Set captifyStatus based on groups\r\n      const groups = (token.groups as string[]) || [];\r\n      if (groups.includes(\"Admins\") || groups.includes(\"Administrators\")) {\r\n        (session as any).captifyStatus = \"approved\";\r\n      } else {\r\n        (session as any).captifyStatus = \"pending\";\r\n      }\r\n\r\n      return session;\r\n    },\r\n    async redirect({ url, baseUrl }) {\r\n      // Handle redirect after sign in\r\n      // Debug logging only in development\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        console.log(\"Redirect callback\", { url, baseUrl });\r\n      }\r\n      // Always redirect to home after sign in\r\n      return baseUrl;\r\n    },\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n    maxAge: 60 * 60, // 1 hour\r\n  },\r\n  cookies: {\r\n    pkceCodeVerifier: {\r\n      name: \"next-auth.pkce.code_verifier\",\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: \"lax\",\r\n        path: \"/\",\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        maxAge: 900, // 15 minutes\r\n      },\r\n    },\r\n    state: {\r\n      name: \"next-auth.state\",\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: \"lax\",\r\n        path: \"/\",\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        maxAge: 900, // 15 minutes\r\n      },\r\n    },\r\n    nonce: {\r\n      name: \"next-auth.nonce\",\r\n      options: {\r\n        httpOnly: true,\r\n        sameSite: \"lax\",\r\n        path: \"/\",\r\n        secure: process.env.NODE_ENV === \"production\",\r\n        maxAge: 900, // 15 minutes\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst authResult = NextAuth(authConfig);\r\nexport const handlers = authResult.handlers;\r\nexport const auth = authResult.auth;\r\nexport const signIn: typeof authResult.signIn = authResult.signIn;\r\nexport const signOut = authResult.signOut;\r\n","import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport type { Session } from \"next-auth\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport function createApiClient(): CaptifyClient {\r\n  return new CaptifyClient({\r\n    appId: \"core\",\r\n    session: null, // Session will be handled by the client internally\r\n  });\r\n}\r\n\r\nexport interface CaptifyResponse<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\nexport interface ApiRequest {\r\n  service: string;\r\n  operation: string;\r\n  app?: string;\r\n  table?: string;\r\n  data?: {\r\n    values?: Array<{ [field: string]: any }>;\r\n    fields?: string[];\r\n    index?: string;\r\n    limit?: number;\r\n    start?: any;\r\n    [key: string]: any; // Allow any additional data\r\n  };\r\n}\r\n\r\nclass ApiClient {\r\n  async run<T = any>(request: ApiRequest): Promise<CaptifyResponse<T>> {\r\n    try {\r\n      // Use app from request, default to \"core\" if not specified\r\n      const app = request.app || \"core\";\r\n      const url = `/api/captify`;\r\n\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-app\": app,\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        return {\r\n          success: false,\r\n          error: `HTTP ${response.status}: ${response.statusText}`,\r\n        };\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : \"Unknown error\",\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const apiClient = new ApiClient();\r\n\r\n// CaptifyClient with convenience methods\r\nexport class CaptifyClient extends ApiClient {\r\n  private appId: string;\r\n  private session: Session | null;\r\n\r\n  constructor(config?: { appId?: string; session?: Session | null }) {\r\n    super();\r\n    this.appId = config?.appId || \"core\";\r\n    this.session = config?.session || null;\r\n  }\r\n\r\n  async query(params: { table: string; [key: string]: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"query\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: params,\r\n    });\r\n  }\r\n\r\n  async get(params: { table: string; [key: string]: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"scan\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: params,\r\n    });\r\n  }\r\n\r\n  async getItem(params: { table: string; key: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"get\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: { key: params.key },\r\n    });\r\n  }\r\n\r\n  async put(params: { table: string; data: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"put\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: params.data,\r\n    });\r\n  }\r\n\r\n  async update(params: { table: string; [key: string]: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"update\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: params,\r\n    });\r\n  }\r\n\r\n  async delete(params: { table: string; key: any }) {\r\n    return this.run({\r\n      service: \"dynamo\",\r\n      operation: \"delete\",\r\n      app: this.appId,\r\n      table: params.table,\r\n      data: { key: params.key },\r\n    });\r\n  }\r\n}\r\n","\"use client\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { App } from \"../types\";\r\nimport { apiClient } from \"../lib/api\";\r\n\r\n/**\r\n * Hook to access current app context and configuration\r\n * Fetches data directly from DynamoDB when needed\r\n */\r\nexport function useAppContext() {\r\n  const { data: session } = useSession();\r\n  const [availableApps, setAvailableApps] = useState<App[]>([]);\r\n  const [appsLoading, setAppsLoading] = useState(false);\r\n  const [currentApp, setCurrentAppState] = useState<App | undefined>(undefined);\r\n\r\n  // Fetch available apps from DynamoDB\r\n  const fetchAvailableApps = useCallback(async () => {\r\n    if (!session?.user) return;\r\n\r\n    setAppsLoading(true);\r\n    try {\r\n      const response = await apiClient.run({\r\n        service: \"dynamo\",\r\n        operation: \"scan\",\r\n        app: \"core\",\r\n        table: \"App\",\r\n        data: {\r\n          FilterExpression: \"#status = :status\",\r\n          ExpressionAttributeNames: {\r\n            \"#status\": \"status\",\r\n          },\r\n          ExpressionAttributeValues: {\r\n            \":status\": \"active\",\r\n          },\r\n        },\r\n      });\r\n\r\n      if (response.success && response.data?.Items) {\r\n        setAvailableApps(response.data.Items as App[]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching available apps:\", error);\r\n    } finally {\r\n      setAppsLoading(false);\r\n    }\r\n  }, [session?.user]);\r\n\r\n  // Load apps when session is available\r\n  useEffect(() => {\r\n    if (session?.user) {\r\n      fetchAvailableApps();\r\n    }\r\n  }, [session?.user, fetchAvailableApps]);\r\n\r\n  const setCurrentApp = useCallback((app: App) => {\r\n    setCurrentAppState(app);\r\n  }, []);\r\n\r\n  const getCurrentAppConfig = useCallback(() => {\r\n    return currentApp;\r\n  }, [currentApp]);\r\n\r\n  /**\r\n   * Get the identity pool ID for the current app\r\n   * Falls back to core app's identity pool if no current app or identityPoolId\r\n   */\r\n  const getCurrentIdentityPoolId = useCallback((): string | undefined => {\r\n    if (currentApp?.identityPoolId) {\r\n      return currentApp.identityPoolId;\r\n    }\r\n\r\n    // Fallback to core app\r\n    const coreApp = availableApps.find((app: App) => app.slug === \"core\");\r\n    return coreApp?.identityPoolId;\r\n  }, [currentApp, availableApps]);\r\n\r\n  /**\r\n   * Get app configuration by slug\r\n   */\r\n  const getAppBySlug = useCallback(\r\n    (slug: string) => {\r\n      return availableApps.find((app: App) => app.slug === slug);\r\n    },\r\n    [availableApps]\r\n  );\r\n\r\n  /**\r\n   * Check if a specific app is available\r\n   */\r\n  const isAppAvailable = useCallback(\r\n    (slug: string): boolean => {\r\n      return availableApps.some(\r\n        (app: App) => app.slug === slug && app.status === \"active\"\r\n      );\r\n    },\r\n    [availableApps]\r\n  );\r\n\r\n  /**\r\n   * Get AWS configuration for a specific app\r\n   */\r\n  const getAppAwsConfig = useCallback(\r\n    (slug: string) => {\r\n      const app = getAppBySlug(slug);\r\n      return {\r\n        identityPoolId: app?.identityPoolId,\r\n        agentId: app?.agentId,\r\n        agentAliasId: app?.agentAliasId,\r\n      };\r\n    },\r\n    [getAppBySlug]\r\n  );\r\n\r\n  return {\r\n    // App context data\r\n    currentApp,\r\n    availableApps,\r\n    appsLoading,\r\n\r\n    // App management functions\r\n    setCurrentApp,\r\n    getCurrentAppConfig,\r\n    getAppBySlug,\r\n    isAppAvailable,\r\n\r\n    // AWS configuration helpers\r\n    getCurrentIdentityPoolId,\r\n    getAppAwsConfig,\r\n  };\r\n}\r\n","\"use client\";\r\n\r\nimport { useRef, MutableRefObject } from \"react\";\r\n\r\n/**\r\n * A safer version of useRef that includes additional error handling\r\n * and SSR protection for client-side operations\r\n */\r\nexport function useSafeRef<T>(initialValue: T): MutableRefObject<T> {\r\n  try {\r\n    return useRef<T>(initialValue);\r\n  } catch (error) {\r\n    console.warn(\"useSafeRef failed, returning fallback:\", error);\r\n    // Return a safe fallback object\r\n    return {\r\n      current: initialValue,\r\n    } as MutableRefObject<T>;\r\n  }\r\n}\r\n\r\n/**\r\n * A useRef wrapper specifically for DOM elements that are null during SSR\r\n */\r\nexport function useDOMRef<\r\n  T extends HTMLElement = HTMLElement\r\n>(): MutableRefObject<T | null> {\r\n  try {\r\n    return useRef<T | null>(null);\r\n  } catch (error) {\r\n    console.warn(\"useDOMRef failed, returning fallback:\", error);\r\n    // Return a safe fallback for SSR\r\n    return {\r\n      current: null,\r\n    } as MutableRefObject<T | null>;\r\n  }\r\n}\r\n\r\n/**\r\n * Safe way to access ref.current with error handling\r\n */\r\nexport function safeRefAccess<T>(\r\n  ref: MutableRefObject<T | null>,\r\n  callback: (current: T) => void,\r\n  fallback?: () => void\r\n): void {\r\n  try {\r\n    if (typeof window !== \"undefined\" && ref?.current) {\r\n      callback(ref.current);\r\n    } else if (fallback) {\r\n      fallback();\r\n    }\r\n  } catch (error) {\r\n    console.warn(\"safeRefAccess failed:\", error);\r\n    if (fallback) {\r\n      fallback();\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;AAEA,YAAY,WAAW;AAEvB,IAAM,oBAAoB;AAEnB,SAAS,cAAc;AAC5B,QAAM,CAAC,UAAU,WAAW,IAAU;AAAA,IACpC;AAAA,EACF;AAEA,EAAM,gBAAU,MAAM;AACpB,UAAM,MAAM,OAAO,WAAW,eAAe,oBAAoB,CAAC,KAAK;AACvE,UAAM,WAAW,6BAAM;AACrB,kBAAY,OAAO,aAAa,iBAAiB;AAAA,IACnD,GAFiB;AAGjB,QAAI,iBAAiB,UAAU,QAAQ;AACvC,gBAAY,OAAO,aAAa,iBAAiB;AACjD,WAAO,MAAM,IAAI,oBAAoB,UAAU,QAAQ;AAAA,EACzD,GAAG,CAAC,CAAC;AAEL,SAAO,CAAC,CAAC;AACX;AAhBgB;;;ACChB,SAAS,YAAAA,WAAU,aAAAC,YAAW,mBAAmB;AACjD,SAAS,kBAAkB;;;ACmB3B,IAAM,YAAN,MAAgB;AAAA,EA3BhB,OA2BgB;AAAA;AAAA;AAAA,EACN,2BAA+C;AAAA,EAC/C,iBAAqC;AAAA;AAAA,EAG7C,mBAAmB,QAA4B,SAAkB;AAE/D,QAAI,KAAK,6BAA6B,UAAU,KAAK,mBAAmB,SAAS;AAC/E,WAAK,2BAA2B;AAChC,WAAK,iBAAiB;AACtB,cAAQ,IAAI,0CAA0C,WAAW,SAAS,MAAM,UAAU,MAAM;AAAA,IAClG;AAAA,EACF;AAAA;AAAA,EAGA,yBAA6C;AAC3C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,IAAa,SAAkD;AACnE,QAAI;AAEF,YAAM,MAAM,QAAQ,OAAO;AAC3B,YAAM,MAAM;AAGZ,YAAM,eAAe;AAAA,QACnB,GAAG;AAAA,QACH,gBAAgB,QAAQ,kBAAkB,KAAK;AAAA,MACjD;AAGA,cAAQ,IAAI,gCAAgC;AAAA,QAC1C,SAAS,QAAQ;AAAA,QACjB,WAAW,QAAQ;AAAA,QACnB,gBAAgB,QAAQ;AAAA,QACxB,kBAAkB,KAAK;AAAA,QACvB,aAAa,aAAa;AAAA,MAC5B,CAAC;AAGD,UAAI,CAAC,QAAQ,kBAAkB,KAAK,0BAA0B;AAC5D,gBAAQ,IAAI,oDAAoD,KAAK,wBAAwB;AAAA,MAC/F;AAEA,YAAM,eAA4B;AAAA,QAChC,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,SAAS;AAAA,QACX;AAAA,QACA,MAAM,KAAK,UAAU,YAAY;AAAA;AAAA,MACnC;AAGA,UAAI,QAAQ,UAAU;AACpB,qBAAa,QAAQ;AAAA,MACvB;AAEA,YAAM,WAAW,MAAM,MAAM,KAAK,YAAY;AAE9C,UAAI,CAAC,SAAS,IAAI;AAChB,eAAO;AAAA,UACL,SAAS;AAAA,UACT,OAAO,QAAQ,SAAS,MAAM,KAAK,SAAS,UAAU;AAAA,QACxD;AAAA,MACF;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AACF;AAGO,IAAM,YAAY,IAAI,UAAU;;;AD3FhC,SAAS,uBAAuB;AACrC,QAAM,EAAE,MAAM,QAAQ,IAAI,WAAW;AACrC,QAAM,CAAC,SAAS,UAAU,IAAIC,UAAS,KAAK;AAC5C,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI;AACtD,QAAM,CAAC,QAAQ,SAAS,IAAIA,UAAgB,CAAC,CAAC;AAC9C,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAgB,CAAC,CAAC;AAChD,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAA6B,CAAC,CAAC;AAK7E,QAAM,eAAe,YAAY,YAAY;AAC3C,eAAW,IAAI;AACf,aAAS,IAAI;AAEb,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,IAAI;AAAA,QACnC,KAAK;AAAA,QACL,SAAS;AAAA,QACT,WAAW;AAAA,MACb,CAAC;AAED,UAAI,SAAS,SAAS;AACpB,mBAAW,SAAS,QAAQ,CAAC,CAAC;AAAA,MAChC,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,8BAA8B;AAAA,MAClE;AAAA,IACF,SAAS,KAAK;AACZ,eAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AAAA,IACnE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,CAAC;AAKL,QAAM,cAAc,YAAY,YAAY;AAC1C,QAAI,CAAC,SAAS,MAAM,GAAI;AAExB,eAAW,IAAI;AACf,aAAS,IAAI;AAEb,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,IAAI;AAAA,QACnC,KAAK;AAAA,QACL,SAAS;AAAA,QACT,WAAW;AAAA,MACb,CAAC;AAED,UAAI,SAAS,SAAS;AACpB,kBAAU,SAAS,QAAQ,CAAC,CAAC;AAAA,MAC/B,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,mCAAmC;AAAA,MACvE;AAAA,IACF,SAAS,KAAK;AACZ,eAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AAAA,IACnE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,OAAO,CAAC;AAKZ,QAAM,gBAAgB;AAAA,IACpB,OACE,OACA,eACA,eACA,mBACqB;AACrB,UAAI,CAAC,SAAS,MAAM,MAAM,CAAC,SAAS,MAAM,OAAO;AAC/C,iBAAS,yCAAyC;AAClD,eAAO;AAAA,MACT;AAEA,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAI;AAAA,UACnC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,SAAS,SAAS;AAEpB,gBAAM,qBAAqB;AAC3B,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,0BAA0B;AAAA,QAC9D;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC,OAAO;AAAA,EACV;AAKA,QAAM,uBAAuB,YAAY,YAAY;AACnD,QAAI,CAAC,SAAS,MAAM,GAAI;AAExB,eAAW,IAAI;AACf,aAAS,IAAI;AAEb,QAAI;AAGF,yBAAmB,CAAC,CAAC;AAAA,IACvB,SAAS,KAAK;AACZ,eAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AAAA,IACnE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,OAAO,CAAC;AAKZ,QAAM,mBAAmB;AAAA,IACvB,OAAO,UAAqD;AAC1D,UAAI,CAAC,SAAS,MAAM,GAAI,QAAO;AAE/B,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAuB;AAAA,UACtD,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM,EAAE,MAAM;AAAA,QAChB,CAAC;AAED,YAAI,SAAS,SAAS;AACpB,iBAAO,SAAS,QAAQ;AAAA,QAC1B,WAAW,SAAS,OAAO,SAAS,WAAW,GAAG;AAChD,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,gCAAgC;AAAA,QACpE;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC,OAAO;AAAA,EACV;AAKA,QAAM,YAAY;AAAA,IAChB,CAAC,UAA2B;AAC1B,aAAO,OAAO,KAAK,SAAO,IAAI,OAAO,KAAK;AAAA,IAC5C;AAAA,IACA,CAAC,MAAM;AAAA,EACT;AAKA,QAAM,oBAAoB;AAAA,IACxB,CAAC,UAA2B;AAC1B,aAAO,gBAAgB;AAAA,QACrB,SAAO,IAAI,UAAU,SAAS,IAAI,WAAW;AAAA,MAC/C;AAAA,IACF;AAAA,IACA,CAAC,eAAe;AAAA,EAClB;AAGA,EAAAC,WAAU,MAAM;AACd,QAAI,SAAS,MAAM,IAAI;AACrB,mBAAa;AACb,kBAAY;AACZ,2BAAqB;AAAA,IACvB;AAAA,EACF,GAAG,CAAC,SAAS,cAAc,aAAa,oBAAoB,CAAC;AAE7D,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA;AAAA,IAGA,SAAS;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,iBAAiB;AAAA,IACnB;AAAA,EACF;AACF;AA3NgB;AAgOT,SAAS,sBAAsB;AACpC,QAAM,EAAE,MAAM,QAAQ,IAAI,WAAW;AACrC,QAAM,CAAC,SAAS,UAAU,IAAID,UAAS,KAAK;AAC5C,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI;AACtD,QAAM,CAAC,iBAAiB,kBAAkB,IAAIA,UAA6B,CAAC,CAAC;AAK7E,QAAM,uBAAuB,YAAY,OAAO,UAAmB;AACjE,eAAW,IAAI;AACf,aAAS,IAAI;AAEb,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,IAAwB;AAAA,QACvD,KAAK;AAAA,QACL,SAAS;AAAA,QACT,WAAW;AAAA,QACX,MAAM,QAAQ,EAAE,MAAM,IAAI;AAAA,MAC5B,CAAC;AAED,UAAI,SAAS,SAAS;AACpB,2BAAmB,SAAS,QAAQ,CAAC,CAAC;AAAA,MACxC,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,SAAS,kCAAkC;AAAA,MACtE;AAAA,IACF,SAAS,KAAK;AACZ,eAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AAAA,IACnE,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,CAAC;AAKL,QAAM,iBAAiB;AAAA,IACrB,OACE,WACA,QACA,gBACqB;AACrB,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAI;AAAA,UACnC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,SAAS,SAAS;AAEpB,gBAAM,qBAAqB;AAC3B,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,2BAA2B;AAAA,QAC/D;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC,oBAAoB;AAAA,EACvB;AAKA,QAAM,gBAAgB;AAAA,IACpB,OAAO,WAAmB,gBAA0C;AAClE,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAI;AAAA,UACnC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,SAAS,SAAS;AAEpB,gBAAM,qBAAqB;AAC3B,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,0BAA0B;AAAA,QAC9D;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC,oBAAoB;AAAA,EACvB;AAKA,QAAM,cAAc;AAAA,IAClB,OACE,QACA,OACA,QACA,eACA,eACqB;AACrB,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAI;AAAA,UACnC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,SAAS,SAAS;AACpB,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,wBAAwB;AAAA,QAC5D;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAKA,QAAM,eAAe;AAAA,IACnB,OAAO,QAAgB,OAAe,WAAsC;AAC1E,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAI;AAAA,UACnC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,YAAI,SAAS,SAAS;AACpB,iBAAO;AAAA,QACT,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,yBAAyB;AAAA,QAC7D;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAKA,QAAM,gBAAgB;AAAA,IACpB,OAAO,UAAuC;AAC5C,iBAAW,IAAI;AACf,eAAS,IAAI;AAEb,UAAI;AACF,cAAM,WAAW,MAAM,UAAU,IAAS;AAAA,UACxC,KAAK;AAAA,UACL,SAAS;AAAA,UACT,WAAW;AAAA,UACX,MAAM,EAAE,MAAM;AAAA,QAChB,CAAC;AAED,YAAI,SAAS,SAAS;AACpB,iBAAO,SAAS,QAAQ;AAAA,QAC1B,OAAO;AACL,gBAAM,IAAI,MAAM,SAAS,SAAS,6BAA6B;AAAA,QACjE;AAAA,MACF,SAAS,KAAK;AACZ,iBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AACjE,eAAO;AAAA,MACT,UAAE;AACA,mBAAW,KAAK;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC;AAAA,EACH;AAGA,EAAAC,WAAU,MAAM;AAEd,QAAI,SAAS,MAAM,IAAI;AACrB,2BAAqB;AAAA,IACvB;AAAA,EACF,GAAG,CAAC,SAAS,oBAAoB,CAAC;AAElC,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA,SAAS;AAAA,MACP,iBAAiB;AAAA,IACnB;AAAA,EACF;AACF;AArPgB;;;AE9OhB,SAAS,eAAAC,cAAa,aAAAC,kBAAiB;;;ACAvC,OAAOC,YAAW;AAGlB,IAAI,OAAO,WAAW,eAAe,CAAC,OAAO,OAAO;AAClD,EAAC,OAAe,QAAQC;AAC1B;AAWO,SAAS,aAAgB,cAA6B;AAC3D,MAAI,OAAO,WAAW,aAAa;AAEjC,UAAM,UACJ,OAAO,iBAAiB,aACnB,aAAyB,IAC1B;AACN,WAAO,CAAC,SAAS,MAAM;AAAA,IAAC,CAAC;AAAA,EAC3B;AACA,SAAOC,OAAM,SAAS,YAAY;AACpC;AAVgB;AAwBT,IAAMC,YAAW;;;ACxCxB,SAAgB,eAAe,kBAA6B;AA4BxD;AApBJ,IAAM,iBAAiB,cAAkC;AAAA,EACvD,SAAS;AAAA,EACT,WAAW;AACb,CAAC;AAuBM,SAAS,aAAiC;AAC/C,QAAM,UAAU,WAAW,cAAc;AACzC,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,kDAAkD;AAAA,EACpE;AACA,SAAO;AACT;AANgB;;;AFvBT,SAAS,eAAe;AAC7B,QAAM,EAAE,QAAQ,IAAI,WAAW;AAC/B,QAAM,CAAC,cAAc,eAAe,IAAIC,UAAmB,CAAC,CAAC;AAC7D,QAAM,CAAC,SAAS,UAAU,IAAIA,UAAS,KAAK;AAG5C,QAAM,oBAAoBC,aAAY,YAAY;AAChD,QAAI,CAAC,SAAS,QAAQ,CAAE,QAAQ,MAAc,IAAI;AAChD,sBAAgB,CAAC,CAAC;AAClB;AAAA,IACF;AAEA,eAAW,IAAI;AACf,QAAI;AACF,YAAM,SAAU,QAAQ,KAAa;AACrC,YAAM,WAAW,MAAM,UAAU,IAAI;AAAA,QACnC,SAAS;AAAA,QACT,WAAW;AAAA,QACX,KAAK;AAAA,QACL,OAAO;AAAA,QACP,MAAM;AAAA,UACJ,WAAW;AAAA,UACX,wBAAwB;AAAA,UACxB,2BAA2B;AAAA,YACzB,WAAW;AAAA,UACb;AAAA,UACA,OAAO;AAAA,QACT;AAAA,MACF,CAAC;AAED,UAAI,SAAS,WAAW,SAAS,MAAM,OAAO,SAAS,GAAG;AACxD,cAAM,YAAY,SAAS,KAAK,MAAM,CAAC;AAEvC,wBAAgB,UAAU,gBAAgB,CAAC,CAAC;AAAA,MAC9C,OAAO;AACL,wBAAgB,CAAC,CAAC;AAAA,MACpB;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,iCAAiC,KAAK;AACpD,sBAAgB,CAAC,CAAC;AAAA,IACpB,UAAE;AACA,iBAAW,KAAK;AAAA,IAClB;AAAA,EACF,GAAG,CAAC,SAAS,IAAI,CAAC;AAGlB,QAAM,iBAAiBA;AAAA,IACrB,OAAO,UAAiC;AACtC,UAAI,CAAC,SAAS,QAAQ,CAAE,QAAQ,MAAc,GAAI;AAElD,YAAM,eAAe,aAAa,SAAS,KAAK,IAC5C,aAAa,OAAO,CAAC,OAAO,OAAO,KAAK,IACxC,CAAC,GAAG,cAAc,KAAK;AAG3B,sBAAgB,YAAY;AAE5B,UAAI;AACF,cAAM,SAAU,QAAQ,KAAa;AAGrC,cAAM,qBAAqB,MAAM,UAAU,IAAI;AAAA,UAC7C,SAAS;AAAA,UACT,WAAW;AAAA,UACX,KAAK;AAAA,UACL,OAAO;AAAA,UACP,MAAM;AAAA,YACJ,WAAW;AAAA,YACX,wBAAwB;AAAA,YACxB,2BAA2B;AAAA,cACzB,WAAW;AAAA,YACb;AAAA,YACA,OAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,YACE,mBAAmB,WACnB,mBAAmB,MAAM,OAAO,SAAS,GACzC;AAEA,gBAAM,YAAY,mBAAmB,KAAK,MAAM,CAAC;AACjD,gBAAM,UAAU,IAAI;AAAA,YAClB,SAAS;AAAA,YACT,WAAW;AAAA,YACX,KAAK;AAAA,YACL,OAAO;AAAA,YACP,MAAM;AAAA,cACJ,KAAK,EAAE,IAAI,UAAU,GAAG;AAAA,cACxB,kBAAkB;AAAA,cAClB,2BAA2B;AAAA,gBACzB,cAAc;AAAA,gBACd,eAAc,oBAAI,KAAK,GAAE,YAAY;AAAA,cACvC;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AAEL,gBAAM,eAAe;AAAA,YACnB,IAAI,aAAa,MAAM,IAAI,KAAK,IAAI,CAAC;AAAA,YACrC,MAAM,aAAa,MAAM;AAAA,YACzB,MAAM,iBAAkB,QAAQ,KAAa,SAAS,MAAM;AAAA,YAC5D,KAAK;AAAA,YACL,OAAO;AAAA,YACP,QAAQ,CAAC;AAAA,YACT,aAAa;AAAA,YACb,SAAS;AAAA,YACT,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,YAClC,WAAW;AAAA,YACX,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,YAClC,WAAW;AAAA,YACX;AAAA,YACA,cAAc;AAAA,YACd,YAAY,CAAC;AAAA,YACb,aAAa,CAAC;AAAA,UAChB;AAEA,gBAAM,UAAU,IAAI;AAAA,YAClB,SAAS;AAAA,YACT,WAAW;AAAA,YACX,KAAK;AAAA,YACL,OAAO;AAAA,YACP,MAAM;AAAA,cACJ,MAAM;AAAA,YACR;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,iCAAiC,KAAK;AAEpD,wBAAgB,YAAY;AAAA,MAC9B;AAAA,IACF;AAAA,IACA,CAAC,SAAS,MAAM,YAAY;AAAA,EAC9B;AAGA,EAAAC,WAAU,MAAM;AACd,sBAAkB;AAAA,EACpB,GAAG,CAAC,iBAAiB,CAAC;AAGtB,QAAM,aAAaD;AAAA,IACjB,CAAC,UAA2B;AAC1B,aAAO,aAAa,SAAS,KAAK;AAAA,IACpC;AAAA,IACA,CAAC,YAAY;AAAA,EACf;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,SAAS;AAAA,EACX;AACF;AA5JgB;;;AGRhB,SAAS,YAAAE,WAAU,eAAAC,oBAAmB;;;ACLtC,OAAO,cAAc;AAErB,OAAO,qBAAqB;AAO5B,eAAe,mBAAmB,cAAsB;AACtD,MAAI;AAEF,QAAI,CAAC,cAAc;AAEjB,UAAI,OAAO,WAAW,aAAa;AACjC,gBAAQ,MAAM,4BAA4B;AAAA,MAC5C;AACA,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAGA,QACE,CAAC,QAAQ,IAAI,kBACb,CAAC,QAAQ,IAAI,qBACb,CAAC,QAAQ,IAAI,uBACb;AAGA,UAAI,OAAO,WAAW,aAAa;AACjC,gBAAQ,MAAM,uCAAuC;AAAA,MACvD;AACA,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACjD;AAEA,UAAM,MAAM,GAAG,QAAQ,IAAI,cAAc;AAGzC,QACE,QAAQ,IAAI,aAAa,iBACzB,OAAO,WAAW,aAClB;AACA,cAAQ,IAAI,mCAAmC,GAAG;AAAA,IACpD;AAEA,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,IAAI,gBAAgB;AAAA,QACxB,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,WAAW,QAAQ,IAAI;AAAA,QACvB,eAAe,QAAQ,IAAI;AAAA,MAC7B,CAAC;AAAA,IACH,CAAC;AAED,UAAM,eAAe,MAAM,SAAS,KAAK;AAGzC,QAAI;AACJ,QAAI;AACF,wBAAkB,KAAK,MAAM,YAAY;AAAA,IAC3C,SAAS,YAAY;AAEnB,UAAI,OAAO,WAAW,aAAa;AACjC,gBAAQ,MAAM,qCAAqC,YAAY;AAAA,MACjE;AACA,YAAM,IAAI,MAAM,yCAAyC,YAAY,EAAE;AAAA,IACzE;AAEA,QAAI,CAAC,SAAS,IAAI;AAEhB,UAAI,OAAO,WAAW,aAAa;AACjC,gBAAQ,MAAM,yBAAyB;AAAA,UACrC,QAAQ,SAAS;AAAA,UACjB,YAAY,SAAS;AAAA,UACrB,OAAO,gBAAgB;AAAA,UACvB,mBAAmB,gBAAgB;AAAA,QACrC,CAAC;AAAA,MACH;AACA,YAAM,IAAI;AAAA,QACR,gBAAgB,qBACd,gBAAgB,SAChB;AAAA,MACJ;AAAA,IACF;AAGA,QAAI,CAAC,gBAAgB,cAAc;AAEjC,UAAI,OAAO,WAAW,aAAa;AACjC,gBAAQ,MAAM,wCAAwC,eAAe;AAAA,MACvE;AACA,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,WAAO;AAAA,MACL,cAAc,gBAAgB;AAAA,MAC9B,UAAU,gBAAgB;AAAA,MAC1B,YAAY,gBAAgB,cAAc;AAAA;AAAA,MAC1C,eAAe,gBAAgB;AAAA,IACjC;AAAA,EACF,SAAS,OAAO;AAEd,QAAI,OAAO,WAAW,aAAa;AACjC,cAAQ,MAAM,kCAAkC;AAAA,QAC9C,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAChD,OAAO,iBAAiB,QAAQ,MAAM,QAAQ;AAAA,MAChD,CAAC;AAAA,IACH;AACA,UAAM;AAAA,EACR;AACF;AAxGe;AA0Gf,IAAM,aAA6B;AAAA,EACjC,WAAW;AAAA,IACT,gBAAgB;AAAA,MACd,UAAU,QAAQ,IAAI;AAAA,MACtB,cAAc,QAAQ,IAAI;AAAA,MAC1B,QAAQ,QAAQ,IAAI;AAAA,MACpB,QAAQ,CAAC,QAAQ,OAAO;AAAA;AAAA,MACxB,eAAe;AAAA,QACb,QAAQ;AAAA,UACN,OAAO;AAAA,UACP,eAAe;AAAA,UACf,eAAe;AAAA,QACjB;AAAA,MACF;AAAA;AAAA,MAEA,QAAQ,SAAS;AACf,eAAO;AAAA,UACL,IAAI,QAAQ;AAAA,UACZ,MAAM,QAAQ;AAAA,UACd,OAAO,QAAQ;AAAA,UACf,OAAO,QAAQ;AAAA,QACjB;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO;AAAA,IACL,QAAQ;AAAA,IACR,OAAO;AAAA,EACT;AAAA,EACA,WAAW;AAAA,IACT,MAAM,IAAI,EAAE,OAAO,SAAS,QAAQ,GAAG;AAErC,UAAI,WAAW,SAAS;AAEtB,YAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,kBAAQ,IAAI,kCAAkC,EAAE,SAAS,QAAQ,CAAC;AAAA,QACpE;AACA,eAAO;AAAA,UACL,GAAG;AAAA,UACH,aAAa,QAAQ;AAAA,UACrB,SAAS,QAAQ;AAAA,UACjB,cAAc,QAAQ;AAAA,UACtB,WAAW,QAAQ;AAAA,UACnB,UAAU,QAAQ,sBAAsB,QAAQ;AAAA,UAChD,QAAS,QAAgB,gBAAgB,KAAK,CAAC;AAAA,QACjD;AAAA,MACF;AAIA,YAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAI,KAAK,IAAI,IAAK,MAAM,YAAuB,MAAO,eAAe;AACnE,eAAO;AAAA,MACT;AAIA,UAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,gBAAQ,IAAI,+CAA+C;AAAA,MAC7D;AAGA,UAAI,CAAC,MAAM,cAAc;AAEvB,YAAI,OAAO,WAAW,aAAa;AACjC,kBAAQ,MAAM,yCAAyC;AAAA,QACzD;AACA,eAAO,EAAE,GAAG,OAAO,OAAO,0BAA0B;AAAA,MACtD;AAGA,UAAI;AACF,cAAM,kBAAkB,MAAM;AAAA,UAC5B,MAAM;AAAA,QACR;AAGA,YAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,kBAAQ,IAAI,8BAA8B;AAAA,QAC5C;AAEA,eAAO;AAAA,UACL,GAAG;AAAA,UACH,aAAa,gBAAgB;AAAA,UAC7B,SAAS,gBAAgB;AAAA,UACzB,cAAc,gBAAgB,iBAAiB,MAAM;AAAA;AAAA,UACrD,WAAW,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,IAAI,gBAAgB;AAAA,QAC7D;AAAA,MACF,SAAS,OAAO;AAEd,YAAI,OAAO,WAAW,aAAa;AACjC,kBAAQ,MAAM,mCAAmC;AAAA,YAC/C,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,YAChD,iBAAiB,CAAC,CAAC,MAAM;AAAA,YACzB,aAAa,MAAM,YACf,IAAI,KAAM,MAAM,YAAuB,GAAI,EAAE,YAAY,IACzD;AAAA,UACN,CAAC;AAAA,QACH;AAGA,eAAO,EAAE,GAAG,OAAO,OAAO,0BAA0B;AAAA,MACtD;AAAA,IACF;AAAA,IACA,MAAM,QAAQ,EAAE,SAAS,MAAM,GAAG;AAGhC,UAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,gBAAQ,IAAI,oBAAoB,EAAE,MAAM,CAAC;AAAA,MAC3C;AAGA,UAAK,MAAc,UAAU,2BAA2B;AAEtD,YAAI,OAAO,WAAW,aAAa;AACjC,kBAAQ;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL,GAAG;AAAA,UACH,OAAO;AAAA,QACT;AAAA,MACF;AAEA,cAAQ,OAAO;AAAA,QACb,GAAG,QAAQ;AAAA,QACX,IAAI,MAAM;AAAA,MACZ;AACA,MAAC,QAAgB,WAAW,MAAM;AAClC,MAAC,QAAgB,cAAc,MAAM;AACrC,MAAC,QAAgB,UAAU,MAAM;AACjC,MAAC,QAAgB,YAAY,MAAM;AACnC,MAAC,QAAgB,SAAS,MAAM,UAAU,CAAC;AAG3C,YAAM,SAAU,MAAM,UAAuB,CAAC;AAC9C,UAAI,OAAO,SAAS,QAAQ,KAAK,OAAO,SAAS,gBAAgB,GAAG;AAClE,QAAC,QAAgB,gBAAgB;AAAA,MACnC,OAAO;AACL,QAAC,QAAgB,gBAAgB;AAAA,MACnC;AAEA,aAAO;AAAA,IACT;AAAA,IACA,MAAM,SAAS,EAAE,KAAK,QAAQ,GAAG;AAG/B,UAAI,QAAQ,IAAI,aAAa,eAAe;AAC1C,gBAAQ,IAAI,qBAAqB,EAAE,KAAK,QAAQ,CAAC;AAAA,MACnD;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,UAAU;AAAA,IACV,QAAQ,KAAK;AAAA;AAAA,EACf;AAAA,EACA,SAAS;AAAA,IACP,kBAAkB;AAAA,MAChB,MAAM;AAAA,MACN,SAAS;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA,QACN,QAAQ,QAAQ,IAAI,aAAa;AAAA,QACjC,QAAQ;AAAA;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA,QACN,QAAQ,QAAQ,IAAI,aAAa;AAAA,QACjC,QAAQ;AAAA;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,MAAM;AAAA,QACN,QAAQ,QAAQ,IAAI,aAAa;AAAA,QACjC,QAAQ;AAAA;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,aAAa,SAAS,UAAU;AAC/B,IAAM,WAAW,WAAW;AAC5B,IAAM,OAAO,WAAW;AACxB,IAAM,SAAmC,WAAW;AACpD,IAAM,UAAU,WAAW;;;ACzTlC,SAAS,YAA6B;AACtC,SAAS,eAAe;AAmCxB,IAAMC,aAAN,MAAgB;AAAA,EApChB,OAoCgB;AAAA;AAAA;AAAA,EACd,MAAM,IAAa,SAAkD;AACnE,QAAI;AAEF,YAAM,MAAM,QAAQ,OAAO;AAC3B,YAAM,MAAM;AAEZ,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QAChC,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,SAAS;AAAA,QACX;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AAChB,eAAO;AAAA,UACL,SAAS;AAAA,UACT,OAAO,QAAQ,SAAS,MAAM,KAAK,SAAS,UAAU;AAAA,QACxD;AAAA,MACF;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AACF;AAGO,IAAMC,aAAY,IAAID,WAAU;;;AFjDhC,SAAS,OACd,SAIiB;AACjB,QAAM,CAAC,OAAO,QAAQ,IAAIE,UAAyB;AAAA,IACjD,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EACT,CAAC;AAED,QAAM,UAAUC;AAAA,IACd,UAAU,SAAmC;AAC3C,eAAS,CAAC,UAAU,EAAE,GAAG,MAAM,SAAS,MAAM,OAAO,KAAK,EAAE;AAE5D,UAAI;AACF,cAAM,WAAW,MAAM,QAAQ,WAAW,GAAG,IAAI;AAEjD,YAAI,SAAS,SAAS;AACpB,mBAAS;AAAA,YACP,MAAM,SAAS,QAAQ;AAAA,YACvB,SAAS;AAAA,YACT,OAAO;AAAA,UACT,CAAC;AACD,iBAAO,SAAS,QAAQ;AAAA,QAC1B,OAAO;AACL,mBAAS;AAAA,YACP,MAAM;AAAA,YACN,SAAS;AAAA,YACT,OAAO,SAAS,SAAS;AAAA,UAC3B,CAAC;AACD,iBAAO;AAAA,QACT;AAAA,MACF,SAAS,OAAO;AACd,cAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU;AAC3C,iBAAS;AAAA,UACP,MAAM;AAAA,UACN,SAAS;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AACD,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,CAAC,OAAO;AAAA,EACV;AAEA,QAAM,QAAQA,aAAY,MAAM;AAC9B,aAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,IACT,CAAC;AAAA,EACH,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA;AAAA,EACF;AACF;AA7DgB;AAkET,SAAS,WAAoB,WAAmB;AACrD,SAAO;AAAA,IAAU,CAAC,QAAQ,QACxB,OAAO,IAAI;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM,EAAE,KAAK,IAAI;AAAA,IACnB,CAAC;AAAA,EACH;AACF;AAVgB;AAeT,SAAS,WAAoB,WAAmB;AACrD,SAAO;AAAA,IAAU,CAAC,QAAQ,SACxB,OAAO,IAAI;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM,EAAE,MAAM,KAAK;AAAA,IACrB,CAAC;AAAA,EACH;AACF;AAVgB;AAeT,SAAS,cAAuB,WAAmB;AACxD,SAAO;AAAA,IACL,CACE,QACA,KACA,kBACA,2BACA,6BAEA,OAAO,IAAI;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,QACJ,KAAK;AAAA,QACL,kBAAkB;AAAA,QAClB,2BAA2B;AAAA,QAC3B,0BAA0B;AAAA,QAC1B,cAAc;AAAA,MAChB;AAAA,IACF,CAAC;AAAA,EACL;AACF;AAvBgB;AA4BT,SAAS,cAAc,WAAmB;AAC/C,SAAO;AAAA,IAA6B,CAAC,QAAQ,QAC3C,OAAO,IAAI;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM,EAAE,KAAK,IAAI;AAAA,IACnB,CAAC;AAAA,EACH;AACF;AAVgB;AAeT,SAAS,aAAsB,WAAmB;AACvD,SAAO;AAAA,IAAuB,CAAC,QAAQ,SAA8B,CAAC,MACpE,OAAO,IAAI;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,MACX,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AACF;AAVgB;AAgBT,SAAS,UAAU;AAuBxB,SAAO;AAAA;AAAA;AAAA;AAAA,IAIL,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACF;AA9BgB;;;AGhLhB,SAAS,YAAAC,WAAU,aAAAC,YAAW,eAAAC,oBAAmB;AACjD,SAAS,cAAAC,mBAAkB;AAQpB,SAAS,gBAAgB;AAC9B,QAAM,EAAE,MAAM,QAAQ,IAAIC,YAAW;AACrC,QAAM,CAAC,eAAe,gBAAgB,IAAIC,UAAgB,CAAC,CAAC;AAC5D,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAS,KAAK;AACpD,QAAM,CAAC,YAAY,kBAAkB,IAAIA,UAA0B,MAAS;AAG5E,QAAM,qBAAqBC,aAAY,YAAY;AACjD,QAAI,CAAC,SAAS,KAAM;AAEpB,mBAAe,IAAI;AACnB,QAAI;AACF,YAAM,WAAW,MAAM,UAAU,IAAI;AAAA,QACnC,SAAS;AAAA,QACT,WAAW;AAAA,QACX,KAAK;AAAA,QACL,OAAO;AAAA,QACP,MAAM;AAAA,UACJ,kBAAkB;AAAA,UAClB,0BAA0B;AAAA,YACxB,WAAW;AAAA,UACb;AAAA,UACA,2BAA2B;AAAA,YACzB,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,SAAS,WAAW,SAAS,MAAM,OAAO;AAC5C,yBAAiB,SAAS,KAAK,KAAc;AAAA,MAC/C;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,kCAAkC,KAAK;AAAA,IACvD,UAAE;AACA,qBAAe,KAAK;AAAA,IACtB;AAAA,EACF,GAAG,CAAC,SAAS,IAAI,CAAC;AAGlB,EAAAC,WAAU,MAAM;AACd,QAAI,SAAS,MAAM;AACjB,yBAAmB;AAAA,IACrB;AAAA,EACF,GAAG,CAAC,SAAS,MAAM,kBAAkB,CAAC;AAEtC,QAAM,gBAAgBD,aAAY,CAAC,QAAa;AAC9C,uBAAmB,GAAG;AAAA,EACxB,GAAG,CAAC,CAAC;AAEL,QAAM,sBAAsBA,aAAY,MAAM;AAC5C,WAAO;AAAA,EACT,GAAG,CAAC,UAAU,CAAC;AAMf,QAAM,2BAA2BA,aAAY,MAA0B;AACrE,QAAI,YAAY,gBAAgB;AAC9B,aAAO,WAAW;AAAA,IACpB;AAGA,UAAM,UAAU,cAAc,KAAK,CAAC,QAAa,IAAI,SAAS,MAAM;AACpE,WAAO,SAAS;AAAA,EAClB,GAAG,CAAC,YAAY,aAAa,CAAC;AAK9B,QAAM,eAAeA;AAAA,IACnB,CAAC,SAAiB;AAChB,aAAO,cAAc,KAAK,CAAC,QAAa,IAAI,SAAS,IAAI;AAAA,IAC3D;AAAA,IACA,CAAC,aAAa;AAAA,EAChB;AAKA,QAAM,iBAAiBA;AAAA,IACrB,CAAC,SAA0B;AACzB,aAAO,cAAc;AAAA,QACnB,CAAC,QAAa,IAAI,SAAS,QAAQ,IAAI,WAAW;AAAA,MACpD;AAAA,IACF;AAAA,IACA,CAAC,aAAa;AAAA,EAChB;AAKA,QAAM,kBAAkBA;AAAA,IACtB,CAAC,SAAiB;AAChB,YAAM,MAAM,aAAa,IAAI;AAC7B,aAAO;AAAA,QACL,gBAAgB,KAAK;AAAA,QACrB,SAAS,KAAK;AAAA,QACd,cAAc,KAAK;AAAA,MACrB;AAAA,IACF;AAAA,IACA,CAAC,YAAY;AAAA,EACf;AAEA,SAAO;AAAA;AAAA,IAEL;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAGA;AAAA,IACA;AAAA,EACF;AACF;AAxHgB;;;ACRhB,SAAS,cAAgC;AAMlC,SAAS,WAAc,cAAsC;AAClE,MAAI;AACF,WAAO,OAAU,YAAY;AAAA,EAC/B,SAAS,OAAO;AACd,YAAQ,KAAK,0CAA0C,KAAK;AAE5D,WAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAVgB;AAeT,SAAS,YAEgB;AAC9B,MAAI;AACF,WAAO,OAAiB,IAAI;AAAA,EAC9B,SAAS,OAAO;AACd,YAAQ,KAAK,yCAAyC,KAAK;AAE3D,WAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAZgB;AAiBT,SAAS,cACd,KACA,UACA,UACM;AACN,MAAI;AACF,QAAI,OAAO,WAAW,eAAe,KAAK,SAAS;AACjD,eAAS,IAAI,OAAO;AAAA,IACtB,WAAW,UAAU;AACnB,eAAS;AAAA,IACX;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,KAAK,yBAAyB,KAAK;AAC3C,QAAI,UAAU;AACZ,eAAS;AAAA,IACX;AAAA,EACF;AACF;AAjBgB;","names":["useState","useEffect","useState","useEffect","useCallback","useEffect","React","React","React","useState","useState","useCallback","useEffect","useState","useCallback","ApiClient","apiClient","useState","useCallback","useState","useEffect","useCallback","useSession","useSession","useState","useCallback","useEffect"]}