{"version":3,"sources":["../src/services/aws/dynamodb.ts","../src/services/aws/cognito.ts","../src/services/aws/s3.ts","../src/services/debug.ts","../src/services/index.ts"],"sourcesContent":["import { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nimport { DynamoDBDocumentClient } from \"@aws-sdk/lib-dynamodb\";\nimport {\n  ScanCommand,\n  QueryCommand,\n  GetCommand,\n  PutCommand,\n  UpdateCommand,\n  DeleteCommand,\n} from \"@aws-sdk/lib-dynamodb\";\n\ninterface AwsCredentials {\n  accessKeyId: string;\n  secretAccessKey: string;\n  sessionToken: string;\n  region: string;\n}\n\nasync function createDynamoClient(\n  credentials: AwsCredentials\n): Promise<DynamoDBDocumentClient> {\n  const client = new DynamoDBClient({\n    region: credentials.region,\n    credentials: {\n      accessKeyId: credentials.accessKeyId,\n      secretAccessKey: credentials.secretAccessKey,\n      sessionToken: credentials.sessionToken,\n    },\n  });\n  return DynamoDBDocumentClient.from(client);\n}\n\nasync function execute(\n  request: {\n    service: string;\n    operation: string;\n    table: string;\n    schema?: string;\n    app?: string;\n    data?: any;\n  },\n  credentials: AwsCredentials\n) {\n  try {\n    const {\n      operation,\n      table,\n      schema = \"captify\",\n      app = \"core\",\n      data = {},\n    } = request;\n\n    // Construct table name as schema-app-table\n    const fullTableName = `${schema}-${app}-${table}`;\n\n    const client = await createDynamoClient(credentials);\n\n    switch (operation) {\n      case \"scan\": {\n        const command = new ScanCommand({ TableName: fullTableName, ...data });\n        const result = await client.send(command);\n        return {\n          success: true,\n          data: result,\n          metadata: {\n            requestId: `dynamo-scan-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.scan\",\n          },\n        };\n      }\n      case \"query\": {\n        const command = new QueryCommand({ TableName: fullTableName, ...data });\n        const result = await client.send(command);\n        return {\n          success: true,\n          data: result,\n          metadata: {\n            requestId: `dynamo-query-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.query\",\n          },\n        };\n      }\n      case \"get\": {\n        const command = new GetCommand({\n          TableName: fullTableName,\n          Key: data.key,\n          ...data,\n        });\n        const result = await client.send(command);\n        return {\n          success: true,\n          data: result.Item || null,\n          metadata: {\n            requestId: `dynamo-get-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.get\",\n          },\n        };\n      }\n      case \"put\": {\n        const command = new PutCommand({\n          TableName: fullTableName,\n          Item: data.item,\n          ...data,\n        });\n        await client.send(command);\n        return {\n          success: true,\n          data: { message: \"Item created successfully\" },\n          metadata: {\n            requestId: `dynamo-put-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.put\",\n          },\n        };\n      }\n      case \"update\": {\n        const command = new UpdateCommand({\n          TableName: fullTableName,\n          Key: data.key,\n          UpdateExpression: data.updateExpression,\n          ExpressionAttributeValues: data.expressionAttributeValues,\n          ...data,\n        });\n        const result = await client.send(command);\n        return {\n          success: true,\n          data: result,\n          metadata: {\n            requestId: `dynamo-update-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.update\",\n          },\n        };\n      }\n      case \"delete\": {\n        const command = new DeleteCommand({\n          TableName: fullTableName,\n          Key: data.key,\n          ...data,\n        });\n        await client.send(command);\n        return {\n          success: true,\n          data: { message: \"Item deleted successfully\" },\n          metadata: {\n            requestId: `dynamo-delete-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.delete\",\n          },\n        };\n      }\n      default:\n        return {\n          success: false,\n          error: `Unsupported operation: ${operation}`,\n          metadata: {\n            requestId: `dynamo-error-${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            source: \"dynamo.execute\",\n          },\n        };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error:\n        error instanceof Error ? error.message : \"DynamoDB operation failed\",\n      metadata: {\n        requestId: `dynamo-error-${Date.now()}`,\n        timestamp: new Date().toISOString(),\n        source: \"dynamo.execute\",\n      },\n    };\n  }\n}\n\nconst manifest = {\n  name: \"dynamo\",\n  version: \"1.0.0\",\n  description: \"DynamoDB service for data operations\",\n  operations: [\"scan\", \"query\", \"get\", \"put\", \"update\", \"delete\"],\n  requiredParams: {\n    scan: [\"table\"],\n    query: [\"table\"],\n    get: [\"table\", \"key\"],\n    put: [\"table\", \"item\"],\n    update: [\"table\", \"key\", \"updateExpression\"],\n    delete: [\"table\", \"key\"],\n  },\n};\n\nexport const dynamo = { execute, manifest };\nexport { execute, manifest, createDynamoClient };\n","/**\n * Cognito Service\n * \n * AWS Cognito user management service using Identity Pool credentials.\n * \n * Authentication:\n * - Uses temporary credentials from Cognito Identity Pool\n * - Credentials are obtained at the API layer using the user's ID token\n * - User must be authenticated and in 'Admins' group for admin operations\n * - Provides user-specific, temporary, scoped access with audit trail\n * \n * Security Benefits:\n * - No hardcoded AWS credentials\n * - Temporary credentials that auto-rotate\n * - User-specific access control\n * - Full audit trail of who performed each action\n * - Instantly revocable by removing user from Admins group\n * \n * Required Configuration:\n * - COGNITO_USER_POOL_ID: The Cognito User Pool ID\n * - COGNITO_IDENTITY_POOL_ID: Identity Pool ID (configured at API layer)\n * - AWS_REGION: AWS region (defaults to us-east-1)\n */\n\nimport {\n  CognitoIdentityProviderClient,\n  ListUsersCommand,\n  AdminGetUserCommand,\n  AdminUpdateUserAttributesCommand,\n  AdminEnableUserCommand,\n  AdminDisableUserCommand,\n  AdminResetUserPasswordCommand,\n  AdminSetUserPasswordCommand,\n  AdminAddUserToGroupCommand,\n  AdminRemoveUserFromGroupCommand,\n  ListGroupsCommand,\n  AdminListGroupsForUserCommand,\n  AdminConfirmSignUpCommand,\n  AdminDeleteUserCommand,\n  GetUserCommand,\n  DescribeUserPoolCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\ninterface CognitoRequest {\n  service: string;\n  operation: string;\n  params?: any;\n  data?: any;\n  schema?: string;\n  app?: string;\n}\n\n/**\n * Execute Cognito user management operations\n * Uses Identity Pool credentials obtained at the API layer\n * Requires user to be in Admins group\n */\nexport async function execute(\n  request: CognitoRequest,\n  credentials?: any, // Identity Pool credentials from API (required)\n  session?: any // User session from API\n): Promise<any> {\n  // Validate that Identity Pool credentials were provided\n  if (!credentials?.accessKeyId || !credentials?.secretAccessKey || !credentials?.sessionToken) {\n    console.error(\"‚ùå No Identity Pool credentials provided\");\n    return { \n      success: false, \n      error: \"Authentication required. Please ensure you are logged in and have the necessary permissions.\",\n      details: \"This service requires Identity Pool credentials which are obtained through the API layer.\"\n    };\n  }\n\n  // Validate user session\n  if (!session?.user) {\n    return {\n      success: false,\n      error: \"No user session found. Please log in to continue.\"\n    };\n  }\n\n  // Check if user is admin\n  const isAdmin = session?.isAdmin || session?.user?.isAdmin || \n                   session?.groups?.includes('Admins') || \n                   session?.user?.groups?.includes('Admins');\n  \n  if (!isAdmin) {\n    console.error(\"üö´ Access denied: User is not in Admins group:\", session.user.email || session.user.id);\n    return {\n      success: false,\n      error: \"Access denied. You must be an administrator to perform Cognito management operations.\",\n      details: \"Please contact your system administrator to request access to the Admins group.\"\n    };\n  }\n\n  console.log(\"üîê Admin user authenticated:\", session.user.email || session.user.id);\n  \n  const region = credentials.region || process.env.AWS_REGION || \"us-east-1\";\n  \n  const client = new CognitoIdentityProviderClient({\n    region,\n    credentials: {\n      accessKeyId: credentials.accessKeyId,\n      secretAccessKey: credentials.secretAccessKey,\n      sessionToken: credentials.sessionToken,\n    },\n  });\n\n  const userPoolId = process.env.COGNITO_USER_POOL_ID || \"us-east-1_k3Fp77c09\";\n\n  if (!userPoolId) {\n    return { success: false, error: \"Cognito User Pool ID not configured\" };\n  }\n\n  try {\n    const params = request.params || request.data || {};\n    \n    switch (request.operation) {\n      case \"listUsers\": {\n        const command = new ListUsersCommand({\n          UserPoolId: userPoolId,\n          Limit: params.limit || 60,\n          PaginationToken: params.paginationToken,\n          Filter: params.filter,\n        });\n        const response = await client.send(command);\n        return { success: true, data: response.Users || [] };\n      }\n\n      case \"getUser\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminGetUserCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        const response = await client.send(command);\n        return { success: true, data: response };\n      }\n\n      case \"updateUser\": {\n        if (!params.Username || !params.UserAttributes) {\n          return { success: false, error: \"Username and UserAttributes are required\" };\n        }\n        const command = new AdminUpdateUserAttributesCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n          UserAttributes: params.UserAttributes,\n        });\n        await client.send(command);\n        return { success: true, message: \"User attributes updated successfully\" };\n      }\n\n      case \"enableUser\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminEnableUserCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        await client.send(command);\n        return { success: true, message: \"User enabled successfully\" };\n      }\n\n      case \"disableUser\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminDisableUserCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        await client.send(command);\n        return { success: true, message: \"User disabled successfully\" };\n      }\n\n      case \"resetPassword\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminResetUserPasswordCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        await client.send(command);\n        return { success: true, message: \"Password reset email sent\" };\n      }\n\n      case \"setPassword\": {\n        if (!params.Username || !params.Password) {\n          return { success: false, error: \"Username and Password are required\" };\n        }\n        const command = new AdminSetUserPasswordCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n          Password: params.Password,\n          Permanent: params.Permanent !== false,\n        });\n        await client.send(command);\n        return { success: true, message: \"Password set successfully\" };\n      }\n\n      case \"addToGroup\": {\n        if (!params.Username || !params.GroupName) {\n          return { success: false, error: \"Username and GroupName are required\" };\n        }\n        const command = new AdminAddUserToGroupCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n          GroupName: params.GroupName,\n        });\n        await client.send(command);\n        return { success: true, message: \"User added to group successfully\" };\n      }\n\n      case \"removeFromGroup\": {\n        if (!params.Username || !params.GroupName) {\n          return { success: false, error: \"Username and GroupName are required\" };\n        }\n        const command = new AdminRemoveUserFromGroupCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n          GroupName: params.GroupName,\n        });\n        await client.send(command);\n        return { success: true, message: \"User removed from group successfully\" };\n      }\n\n      case \"listGroups\": {\n        const command = new ListGroupsCommand({\n          UserPoolId: userPoolId,\n          Limit: params.limit || 60,\n          NextToken: params.nextToken,\n        });\n        const response = await client.send(command);\n        return { success: true, data: response.Groups || [] };\n      }\n\n      case \"getUserGroups\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminListGroupsForUserCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n          Limit: params.limit || 60,\n          NextToken: params.nextToken,\n        });\n        const response = await client.send(command);\n        return { success: true, data: response.Groups || [] };\n      }\n\n      case \"confirmSignUp\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminConfirmSignUpCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        await client.send(command);\n        return { success: true, message: \"User sign up confirmed\" };\n      }\n\n      case \"deleteUser\": {\n        if (!params.Username) {\n          return { success: false, error: \"Username is required\" };\n        }\n        const command = new AdminDeleteUserCommand({\n          UserPoolId: userPoolId,\n          Username: params.Username,\n        });\n        await client.send(command);\n        return { success: true, message: \"User deleted successfully\" };\n      }\n\n      case \"describeUserPool\": {\n        const command = new DescribeUserPoolCommand({\n          UserPoolId: userPoolId,\n        });\n        const response = await client.send(command);\n        return { success: true, data: response.UserPool };\n      }\n\n      default:\n        return { success: false, error: `Unknown operation: ${request.operation}` };\n    }\n  } catch (error: any) {\n    console.error(\"Cognito operation error:\", error);\n    \n    // Provide more specific error messages\n    if (error.name === \"AccessDeniedException\" || error.$metadata?.httpStatusCode === 403) {\n      return {\n        success: false,\n        error: \"Access denied. Please ensure you are in the Admins group to perform this operation.\",\n        details: error.$metadata,\n      };\n    }\n    \n    if (error.name === \"NotAuthorizedException\") {\n      return {\n        success: false,\n        error: \"Not authorized. Your session may have expired. Please log in again.\",\n        details: error.$metadata,\n      };\n    }\n    \n    if (error.name === \"ExpiredTokenException\") {\n      return {\n        success: false,\n        error: \"Your authentication token has expired. Please refresh the page to get new credentials.\",\n        details: error.$metadata,\n      };\n    }\n    \n    return {\n      success: false,\n      error: error.message || \"Cognito operation failed\",\n      details: error.$metadata,\n    };\n  }\n}\n\n/**\n * Check if user has admin privileges\n * @param session - User session containing groups or role information\n */\nexport function isAdmin(session?: any): boolean {\n  if (!session) return false;\n  \n  // Check session-level isAdmin flag (set by NextAuth)\n  if (session.isAdmin === true) {\n    return true;\n  }\n  \n  // Check user-level isAdmin flag\n  if (session.user?.isAdmin === true) {\n    return true;\n  }\n  \n  // Check if user has admin group membership in their Cognito groups\n  if (session.user?.groups?.includes(\"Admins\")) {\n    return true;\n  }\n  \n  // Check groups from session level\n  if (session.groups?.includes(\"Admins\")) {\n    return true;\n  }\n  \n  // Check cognito:groups claim (legacy support)\n  if (session?.['cognito:groups']?.includes(\"Admins\")) {\n    return true;\n  }\n  \n  return false;\n}\n\nexport const cognito = {\n  execute,\n  isAdmin,\n};","/**\n * S3 Service\n * Handles all S3 operations for the Captify platform\n */\n\nimport type { ApiUserSession, AwsCredentials } from \"../../types\";\n\n// AWS SDK imports\nimport {\n  S3Client,\n  GetObjectCommand,\n  PutObjectCommand,\n  DeleteObjectCommand,\n  ListObjectsV2Command,\n  type GetObjectCommandInput,\n  type PutObjectCommandInput,\n  type DeleteObjectCommandInput,\n  type ListObjectsV2CommandInput,\n} from \"@aws-sdk/client-s3\";\n\n/**\n * Create S3 client with credentials\n */\nfunction createS3Client(\n  credentials: AwsCredentials & { region: string }\n): S3Client {\n  return new S3Client({\n    region: credentials.region,\n    credentials: {\n      accessKeyId: credentials.accessKeyId,\n      secretAccessKey: credentials.secretAccessKey,\n      sessionToken: credentials.sessionToken,\n    },\n  });\n}\n\n/**\n * Execute S3 operations\n */\nexport async function execute(\n  operation: string,\n  params: any,\n  credentials: AwsCredentials & { region: string }\n): Promise<any> {\n  try {\n    // Validate operation\n    const validOperations = [\"get\", \"put\", \"delete\", \"list\"];\n    if (!validOperations.includes(operation)) {\n      throw new Error(\n        `Invalid S3 operation: ${operation}. Valid operations: ${validOperations.join(\n          \", \"\n        )}`\n      );\n    }\n\n    // Extract bucket and key from params\n    const bucket = params?.bucket;\n    const key = params?.key;\n\n    if (!bucket) {\n      throw new Error(\"Bucket is required for S3 operations\");\n    }\n\n    // Create S3 client\n    const client = createS3Client(credentials);\n\n    // Route to specific operation\n    switch (operation) {\n      case \"get\":\n        return await executeGet(client, bucket, key, params);\n      case \"put\":\n        return await executePut(client, bucket, key, params);\n      case \"delete\":\n        return await executeDelete(client, bucket, key, params);\n      case \"list\":\n        return await executeList(client, bucket, params);\n      default:\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Execute GET operation\n */\nasync function executeGet(\n  client: S3Client,\n  bucket: string,\n  key: string,\n  data: any\n): Promise<any> {\n  if (!key) {\n    throw new Error(\"Key is required for S3 GET operation\");\n  }\n\n  const params: GetObjectCommandInput = {\n    Bucket: bucket,\n    Key: key,\n    ...data,\n  };\n\n  const command = new GetObjectCommand(params);\n  const result = await client.send(command);\n\n  // Convert the body to string if it's a readable stream\n  let body = null;\n  if (result.Body) {\n    const chunks = [];\n    for await (const chunk of result.Body as any) {\n      chunks.push(chunk);\n    }\n    body = Buffer.concat(chunks).toString();\n  }\n\n  return {\n    body,\n    contentType: result.ContentType,\n    contentLength: result.ContentLength,\n    lastModified: result.LastModified,\n    etag: result.ETag,\n    metadata: result.Metadata,\n  };\n}\n\n/**\n * Execute PUT operation\n */\nasync function executePut(\n  client: S3Client,\n  bucket: string,\n  key: string,\n  data: any\n): Promise<any> {\n  if (!key) {\n    throw new Error(\"Key is required for S3 PUT operation\");\n  }\n\n  const params: PutObjectCommandInput = {\n    Bucket: bucket,\n    Key: key,\n    Body: data.body || data.Body,\n    ContentType: data.contentType || data.ContentType,\n    Metadata: data.metadata || data.Metadata,\n    ...data,\n  };\n\n  const command = new PutObjectCommand(params);\n  const result = await client.send(command);\n\n  return {\n    etag: result.ETag,\n    location: `https://${bucket}.s3.amazonaws.com/${key}`,\n  };\n}\n\n/**\n * Execute DELETE operation\n */\nasync function executeDelete(\n  client: S3Client,\n  bucket: string,\n  key: string,\n  data: any\n): Promise<any> {\n  if (!key) {\n    throw new Error(\"Key is required for S3 DELETE operation\");\n  }\n\n  const params: DeleteObjectCommandInput = {\n    Bucket: bucket,\n    Key: key,\n    ...data,\n  };\n\n  const command = new DeleteObjectCommand(params);\n  await client.send(command);\n\n  return { message: \"Object deleted successfully\" };\n}\n\n/**\n * Execute LIST operation\n */\nasync function executeList(\n  client: S3Client,\n  bucket: string,\n  data: any\n): Promise<any> {\n  const params: ListObjectsV2CommandInput = {\n    Bucket: bucket,\n    Prefix: data.prefix || data.Prefix,\n    MaxKeys: data.maxKeys || data.MaxKeys || 1000,\n    ContinuationToken: data.continuationToken || data.ContinuationToken,\n    ...data,\n  };\n\n  const command = new ListObjectsV2Command(params);\n  const result = await client.send(command);\n\n  return {\n    objects: result.Contents || [],\n    count: result.KeyCount || 0,\n    isTruncated: result.IsTruncated || false,\n    nextContinuationToken: result.NextContinuationToken,\n    prefix: result.Prefix,\n  };\n}\n\nconst manifest = {\n  name: 's3',\n  version: '1.0.0',\n  description: 'S3 service for file operations',\n  operations: ['getObject', 'putObject', 'deleteObject', 'listObjects'],\n  requiredParams: {\n    getObject: ['bucket', 'key'],\n    putObject: ['bucket', 'key', 'body'],\n    deleteObject: ['bucket', 'key'],\n    listObjects: ['bucket'],\n  },\n};\n\nexport const s3 = { execute, manifest };\n","/**\r\n * Debug service for system utilities and testing\r\n */\r\n\r\nexport async function execute(\r\n  request: {\r\n    service: string;\r\n    operation: string;\r\n    data?: any;\r\n  },\r\n  credentials?: any\r\n) {\r\n  try {\r\n    const { operation, data } = request;\r\n\r\n    switch (operation) {\r\n      case \"clearCredentialsCache\": {\r\n        // This will clear the server-side credentials cache\r\n        return {\r\n          success: true,\r\n          data: { \r\n            message: \"Cache clear request sent\",\r\n            timestamp: new Date().toISOString()\r\n          },\r\n          metadata: {\r\n            requestId: `debug-clear-cache-${Date.now()}`,\r\n            timestamp: new Date().toISOString(),\r\n            source: \"debug.clearCredentialsCache\",\r\n          },\r\n        };\r\n      }\r\n\r\n      case \"ping\": {\r\n        // Simple health check\r\n        return {\r\n          success: true,\r\n          data: { \r\n            message: \"pong\",\r\n            timestamp: new Date().toISOString(),\r\n            echo: data\r\n          },\r\n          metadata: {\r\n            requestId: `debug-ping-${Date.now()}`,\r\n            timestamp: new Date().toISOString(),\r\n            source: \"debug.ping\",\r\n          },\r\n        };\r\n      }\r\n\r\n      case \"testError\": {\r\n        // Test error handling\r\n        throw new Error(data?.message || \"Test error triggered\");\r\n      }\r\n\r\n      case \"getSystemInfo\": {\r\n        // Return system information\r\n        return {\r\n          success: true,\r\n          data: {\r\n            nodeVersion: process.version,\r\n            platform: process.platform,\r\n            uptime: process.uptime(),\r\n            memory: process.memoryUsage(),\r\n            env: process.env.NODE_ENV,\r\n          },\r\n          metadata: {\r\n            requestId: `debug-system-${Date.now()}`,\r\n            timestamp: new Date().toISOString(),\r\n            source: \"debug.getSystemInfo\",\r\n          },\r\n        };\r\n      }\r\n\r\n      default:\r\n        return {\r\n          success: false,\r\n          error: `Unsupported debug operation: ${operation}`,\r\n          metadata: {\r\n            requestId: `debug-error-${Date.now()}`,\r\n            timestamp: new Date().toISOString(),\r\n            source: \"debug.execute\",\r\n          },\r\n        };\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : \"Debug operation failed\",\r\n      metadata: {\r\n        requestId: `debug-error-${Date.now()}`,\r\n        timestamp: new Date().toISOString(),\r\n        source: \"debug.execute\",\r\n        error: error instanceof Error ? error.stack : undefined,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nconst manifest = {\r\n  name: \"debug\",\r\n  version: \"1.0.0\",\r\n  description: \"Debug and system utility service\",\r\n  operations: [\"clearCredentialsCache\", \"ping\", \"testError\", \"getSystemInfo\"],\r\n  requiredParams: {\r\n    clearCredentialsCache: [],\r\n    ping: [],\r\n    testError: [],\r\n    getSystemInfo: [],\r\n  },\r\n};\r\n\r\nexport const debug = { execute, manifest };","import { dynamo } from \"./aws/dynamodb\";\r\nimport { cognito } from \"./aws/cognito\";\r\nimport { s3 } from \"./aws/s3\";\r\nimport { debug } from \"./debug\";\r\n\r\n// Service registry for server-side usage\r\nexport const services = {\r\n  use: (serviceName: string) => {\r\n    switch (serviceName) {\r\n      case \"dynamodb\":\r\n      case \"dynamo\":\r\n        return dynamo;\r\n      case \"cognito\":\r\n        return cognito;\r\n      case \"s3\":\r\n        return s3;\r\n      case \"debug\":\r\n        return debug;\r\n      default:\r\n        throw new Error(`Unknown service: ${serviceName}`);\r\n    }\r\n  },\r\n\r\n  // Direct access to services\r\n  dynamodb: dynamo,\r\n  dynamo,\r\n  cognito,\r\n  s3,\r\n  debug,\r\n};\r\n\r\n// Export individual services for direct import\r\nexport { dynamo, dynamo as dynamodb } from \"./aws/dynamodb\";\r\nexport { cognito } from \"./aws/cognito\";\r\nexport { s3 } from \"./aws/s3\";\r\nexport { debug } from \"./debug\";\r\n\r\n// Export AWS utilities\r\nexport * from \"./aws\";\r\n\r\n// Export types\r\nexport type { AwsCredentials, ApiUserSession } from \"../types\";\r\n"],"mappings":"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","names":["execute","isAdmin","execute","manifest","execute","manifest"]}